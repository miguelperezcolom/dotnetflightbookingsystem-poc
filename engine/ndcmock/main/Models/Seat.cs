/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Seat : IEquatable<Seat>
    { 
        /// <summary>
        /// A list of characteristics about the seat
        /// </summary>
        /// <value>A list of characteristics about the seat</value>

        [DataMember(Name="characteristics")]
        public List<Characteristics> Characteristics { get; set; }

        /// <summary>
        /// Seat description
        /// </summary>
        /// <value>Seat description</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// This is an attribute for each seat.
        /// </summary>
        /// <value>This is an attribute for each seat.</value>

        [DataMember(Name="listKey")]
        public string ListKey { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>

        [DataMember(Name="location")]
        public SeatLocation Location { get; set; }

        /// <summary>
        /// Reference to passenger which can select the seat. Sometimes the same seat has different price depending on the type of passenger, some other times two passengers of the same type are not allowed to get the same seats, for example when two adults travel with an infant, one of those adults will have a few specific seats.
        /// </summary>
        /// <value>Reference to passenger which can select the seat. Sometimes the same seat has different price depending on the type of passenger, some other times two passengers of the same type are not allowed to get the same seats, for example when two adults travel with an infant, one of those adults will have a few specific seats.</value>

        [DataMember(Name="passengerRefs")]
        public string PassengerRefs { get; set; }

        /// <summary>
        /// Type of passenger which can select the seat (sometimes the same seat has different price depending on the type of passenger)
        /// </summary>
        /// <value>Type of passenger which can select the seat (sometimes the same seat has different price depending on the type of passenger)</value>

        [DataMember(Name="passengerType")]
        public string PassengerType { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// This is an attribute for each seat.
        /// </summary>
        /// <value>This is an attribute for each seat.</value>

        [DataMember(Name="refs")]
        public string Refs { get; set; }

        /// <summary>
        /// Some seats have restriction about the age, blindness, deafness, state of pregnancy, etc...
        /// </summary>
        /// <value>Some seats have restriction about the age, blindness, deafness, state of pregnancy, etc...</value>

        [DataMember(Name="remarks")]
        public List<string> Remarks { get; set; }

        /// <summary>
        /// Points when a seats is removable or not. Used only in OrderViewRS
        /// </summary>
        /// <value>Points when a seats is removable or not. Used only in OrderViewRS</value>

        [DataMember(Name="removable")]
        public bool? Removable { get; set; }

        /// <summary>
        /// Flight Segment Reference Key
        /// </summary>
        /// <value>Flight Segment Reference Key</value>

        [DataMember(Name="segment")]
        public string Segment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Seat {\n");
            sb.Append("  Characteristics: ").Append(Characteristics).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ListKey: ").Append(ListKey).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PassengerRefs: ").Append(PassengerRefs).Append("\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Refs: ").Append(Refs).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  Removable: ").Append(Removable).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Seat)obj);
        }

        /// <summary>
        /// Returns true if Seat instances are equal
        /// </summary>
        /// <param name="other">Instance of Seat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Seat other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Characteristics == other.Characteristics ||
                    Characteristics != null &&
                    Characteristics.SequenceEqual(other.Characteristics)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ListKey == other.ListKey ||
                    ListKey != null &&
                    ListKey.Equals(other.ListKey)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    PassengerRefs == other.PassengerRefs ||
                    PassengerRefs != null &&
                    PassengerRefs.Equals(other.PassengerRefs)
                ) && 
                (
                    PassengerType == other.PassengerType ||
                    PassengerType != null &&
                    PassengerType.Equals(other.PassengerType)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    Refs == other.Refs ||
                    Refs != null &&
                    Refs.Equals(other.Refs)
                ) && 
                (
                    Remarks == other.Remarks ||
                    Remarks != null &&
                    Remarks.SequenceEqual(other.Remarks)
                ) && 
                (
                    Removable == other.Removable ||
                    Removable != null &&
                    Removable.Equals(other.Removable)
                ) && 
                (
                    Segment == other.Segment ||
                    Segment != null &&
                    Segment.Equals(other.Segment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Characteristics != null)
                    hashCode = hashCode * 59 + Characteristics.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ListKey != null)
                    hashCode = hashCode * 59 + ListKey.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (PassengerRefs != null)
                    hashCode = hashCode * 59 + PassengerRefs.GetHashCode();
                    if (PassengerType != null)
                    hashCode = hashCode * 59 + PassengerType.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Refs != null)
                    hashCode = hashCode * 59 + Refs.GetHashCode();
                    if (Remarks != null)
                    hashCode = hashCode * 59 + Remarks.GetHashCode();
                    if (Removable != null)
                    hashCode = hashCode * 59 + Removable.GetHashCode();
                    if (Segment != null)
                    hashCode = hashCode * 59 + Segment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Seat left, Seat right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Seat left, Seat right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
