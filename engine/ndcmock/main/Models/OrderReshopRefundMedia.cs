/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// OrderReshopRefundMedia media type (default view)
    /// </summary>
    [DataContract]
    public partial class OrderReshopRefundMedia : IEquatable<OrderReshopRefundMedia>
    { 
        /// <summary>
        /// Flight Segment information. Including departure, arrival and airline information.
        /// </summary>
        /// <value>Flight Segment information. Including departure, arrival and airline information.</value>

        [DataMember(Name="flights")]
        public List<Flight> Flights { get; set; }

        /// <summary>
        /// Gets or Sets OriginalOrder
        /// </summary>

        [DataMember(Name="originalOrder")]
        public Price OriginalOrder { get; set; }

        /// <summary>
        /// Gets or Sets Penalty
        /// </summary>

        [DataMember(Name="penalty")]
        public Price Penalty { get; set; }

        /// <summary>
        /// Gets or Sets Refund
        /// </summary>

        [DataMember(Name="refund")]
        public Price Refund { get; set; }

        /// <summary>
        /// List of seats
        /// </summary>
        /// <value>List of seats</value>

        [DataMember(Name="seats")]
        public List<Seat> Seats { get; set; }

        /// <summary>
        /// List of services
        /// </summary>
        /// <value>List of services</value>

        [DataMember(Name="services")]
        public List<Service> Services { get; set; }

        /// <summary>
        /// Tickets information
        /// </summary>
        /// <value>Tickets information</value>

        [DataMember(Name="tickets")]
        public List<TicketInfo> Tickets { get; set; }

        /// <summary>
        /// Some airlines returns the voiding option in the OrderReshop Refund. In this way, this field indicates if the OrderCancel will be executed.
        /// </summary>
        /// <value>Some airlines returns the voiding option in the OrderReshop Refund. In this way, this field indicates if the OrderCancel will be executed.</value>

        [DataMember(Name="voidPermited")]
        public bool? VoidPermited { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>

        [DataMember(Name="warnings")]
        public List<OrderLog> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderReshopRefundMedia {\n");
            sb.Append("  Flights: ").Append(Flights).Append("\n");
            sb.Append("  OriginalOrder: ").Append(OriginalOrder).Append("\n");
            sb.Append("  Penalty: ").Append(Penalty).Append("\n");
            sb.Append("  Refund: ").Append(Refund).Append("\n");
            sb.Append("  Seats: ").Append(Seats).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Tickets: ").Append(Tickets).Append("\n");
            sb.Append("  VoidPermited: ").Append(VoidPermited).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderReshopRefundMedia)obj);
        }

        /// <summary>
        /// Returns true if OrderReshopRefundMedia instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderReshopRefundMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderReshopRefundMedia other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Flights == other.Flights ||
                    Flights != null &&
                    Flights.SequenceEqual(other.Flights)
                ) && 
                (
                    OriginalOrder == other.OriginalOrder ||
                    OriginalOrder != null &&
                    OriginalOrder.Equals(other.OriginalOrder)
                ) && 
                (
                    Penalty == other.Penalty ||
                    Penalty != null &&
                    Penalty.Equals(other.Penalty)
                ) && 
                (
                    Refund == other.Refund ||
                    Refund != null &&
                    Refund.Equals(other.Refund)
                ) && 
                (
                    Seats == other.Seats ||
                    Seats != null &&
                    Seats.SequenceEqual(other.Seats)
                ) && 
                (
                    Services == other.Services ||
                    Services != null &&
                    Services.SequenceEqual(other.Services)
                ) && 
                (
                    Tickets == other.Tickets ||
                    Tickets != null &&
                    Tickets.SequenceEqual(other.Tickets)
                ) && 
                (
                    VoidPermited == other.VoidPermited ||
                    VoidPermited != null &&
                    VoidPermited.Equals(other.VoidPermited)
                ) && 
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Flights != null)
                    hashCode = hashCode * 59 + Flights.GetHashCode();
                    if (OriginalOrder != null)
                    hashCode = hashCode * 59 + OriginalOrder.GetHashCode();
                    if (Penalty != null)
                    hashCode = hashCode * 59 + Penalty.GetHashCode();
                    if (Refund != null)
                    hashCode = hashCode * 59 + Refund.GetHashCode();
                    if (Seats != null)
                    hashCode = hashCode * 59 + Seats.GetHashCode();
                    if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                    if (Tickets != null)
                    hashCode = hashCode * 59 + Tickets.GetHashCode();
                    if (VoidPermited != null)
                    hashCode = hashCode * 59 + VoidPermited.GetHashCode();
                    if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderReshopRefundMedia left, OrderReshopRefundMedia right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderReshopRefundMedia left, OrderReshopRefundMedia right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
