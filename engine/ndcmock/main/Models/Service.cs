/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Service List
    /// </summary>
    [DataContract]
    public partial class Service : IEquatable<Service>
    { 
        /// <summary>
        /// Gets or Sets BookingInstructions
        /// </summary>

        [DataMember(Name="bookingInstructions")]
        public BookingInstructions BookingInstructions { get; set; }

        /// <summary>
        /// List of service descriptions
        /// </summary>
        /// <value>List of service descriptions</value>

        [DataMember(Name="descriptions")]
        public List<string> Descriptions { get; set; }

        /// <summary>
        /// Maximum quantity of services
        /// </summary>
        /// <value>Maximum quantity of services</value>

        [DataMember(Name="maximumQuantity")]
        public long? MaximumQuantity { get; set; }

        /// <summary>
        /// Minimum quantity of services
        /// </summary>
        /// <value>Minimum quantity of services</value>

        [DataMember(Name="minimumQuantity")]
        public long? MinimumQuantity { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        /// <value>Service name</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Service object key
        /// </summary>
        /// <value>Service object key</value>

        [DataMember(Name="objectKey")]
        public string ObjectKey { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// Service reference
        /// </summary>
        /// <value>Service reference</value>

        [DataMember(Name="ref")]
        public string Ref { get; set; }

        /// <summary>
        /// Points when a service is removable or not. Used only in OrderViewRS
        /// </summary>
        /// <value>Points when a service is removable or not. Used only in OrderViewRS</value>

        [DataMember(Name="removable")]
        public bool? Removable { get; set; }

        /// <summary>
        /// Segment references
        /// </summary>
        /// <value>Segment references</value>

        [DataMember(Name="segmentReferences")]
        public string SegmentReferences { get; set; }

        /// <summary>
        /// Service ID
        /// </summary>
        /// <value>Service ID</value>

        [DataMember(Name="serviceID")]
        public string ServiceID { get; set; }

        /// <summary>
        /// Traveler references
        /// </summary>
        /// <value>Traveler references</value>

        [DataMember(Name="travelerReferences")]
        public string TravelerReferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  BookingInstructions: ").Append(BookingInstructions).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  MaximumQuantity: ").Append(MaximumQuantity).Append("\n");
            sb.Append("  MinimumQuantity: ").Append(MinimumQuantity).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ObjectKey: ").Append(ObjectKey).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  Removable: ").Append(Removable).Append("\n");
            sb.Append("  SegmentReferences: ").Append(SegmentReferences).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  TravelerReferences: ").Append(TravelerReferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Service)obj);
        }

        /// <summary>
        /// Returns true if Service instances are equal
        /// </summary>
        /// <param name="other">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BookingInstructions == other.BookingInstructions ||
                    BookingInstructions != null &&
                    BookingInstructions.Equals(other.BookingInstructions)
                ) && 
                (
                    Descriptions == other.Descriptions ||
                    Descriptions != null &&
                    Descriptions.SequenceEqual(other.Descriptions)
                ) && 
                (
                    MaximumQuantity == other.MaximumQuantity ||
                    MaximumQuantity != null &&
                    MaximumQuantity.Equals(other.MaximumQuantity)
                ) && 
                (
                    MinimumQuantity == other.MinimumQuantity ||
                    MinimumQuantity != null &&
                    MinimumQuantity.Equals(other.MinimumQuantity)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ObjectKey == other.ObjectKey ||
                    ObjectKey != null &&
                    ObjectKey.Equals(other.ObjectKey)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    Ref == other.Ref ||
                    Ref != null &&
                    Ref.Equals(other.Ref)
                ) && 
                (
                    Removable == other.Removable ||
                    Removable != null &&
                    Removable.Equals(other.Removable)
                ) && 
                (
                    SegmentReferences == other.SegmentReferences ||
                    SegmentReferences != null &&
                    SegmentReferences.Equals(other.SegmentReferences)
                ) && 
                (
                    ServiceID == other.ServiceID ||
                    ServiceID != null &&
                    ServiceID.Equals(other.ServiceID)
                ) && 
                (
                    TravelerReferences == other.TravelerReferences ||
                    TravelerReferences != null &&
                    TravelerReferences.Equals(other.TravelerReferences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BookingInstructions != null)
                    hashCode = hashCode * 59 + BookingInstructions.GetHashCode();
                    if (Descriptions != null)
                    hashCode = hashCode * 59 + Descriptions.GetHashCode();
                    if (MaximumQuantity != null)
                    hashCode = hashCode * 59 + MaximumQuantity.GetHashCode();
                    if (MinimumQuantity != null)
                    hashCode = hashCode * 59 + MinimumQuantity.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ObjectKey != null)
                    hashCode = hashCode * 59 + ObjectKey.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Ref != null)
                    hashCode = hashCode * 59 + Ref.GetHashCode();
                    if (Removable != null)
                    hashCode = hashCode * 59 + Removable.GetHashCode();
                    if (SegmentReferences != null)
                    hashCode = hashCode * 59 + SegmentReferences.GetHashCode();
                    if (ServiceID != null)
                    hashCode = hashCode * 59 + ServiceID.GetHashCode();
                    if (TravelerReferences != null)
                    hashCode = hashCode * 59 + TravelerReferences.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Service left, Service right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Service left, Service right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
