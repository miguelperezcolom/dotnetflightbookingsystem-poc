/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Travelers : IEquatable<Travelers>
    { 
        /// <summary>
        /// Number of adult passengers - older than 12 yo
        /// </summary>
        /// <value>Number of adult passengers - older than 12 yo</value>
        [Required]
        
        [DataMember(Name="ADT")]
        public double? ADT { get; set; }

        /// <summary>
        /// Number of children - older than 2 yo
        /// </summary>
        /// <value>Number of children - older than 2 yo</value>

        [DataMember(Name="CHD")]
        public double? CHD { get; set; }

        /// <summary>
        /// Number of infants - younger than 2 yo
        /// </summary>
        /// <value>Number of infants - younger than 2 yo</value>

        [DataMember(Name="INF")]
        public double? INF { get; set; }

        /// <summary>
        /// Number of young adults for Tour Operators - 12-16 yo
        /// </summary>
        /// <value>Number of young adults for Tour Operators - 12-16 yo</value>

        [DataMember(Name="V14")]
        public double? V14 { get; set; }

        /// <summary>
        /// Number of adult passengers for Tour Operators - older than 12 yo
        /// </summary>
        /// <value>Number of adult passengers for Tour Operators - older than 12 yo</value>

        [DataMember(Name="VFR")]
        public double? VFR { get; set; }

        /// <summary>
        /// Number of infants for Tour Operators - younger than 2 yo
        /// </summary>
        /// <value>Number of infants for Tour Operators - younger than 2 yo</value>

        [DataMember(Name="VNF")]
        public double? VNF { get; set; }

        /// <summary>
        /// Number of children for Tour Operators - older than 2 yo
        /// </summary>
        /// <value>Number of children for Tour Operators - older than 2 yo</value>

        [DataMember(Name="VNN")]
        public double? VNN { get; set; }

        /// <summary>
        /// Number of young adults - 12-16 yo
        /// </summary>
        /// <value>Number of young adults - 12-16 yo</value>

        [DataMember(Name="YAD")]
        public double? YAD { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Travelers {\n");
            sb.Append("  ADT: ").Append(ADT).Append("\n");
            sb.Append("  CHD: ").Append(CHD).Append("\n");
            sb.Append("  INF: ").Append(INF).Append("\n");
            sb.Append("  V14: ").Append(V14).Append("\n");
            sb.Append("  VFR: ").Append(VFR).Append("\n");
            sb.Append("  VNF: ").Append(VNF).Append("\n");
            sb.Append("  VNN: ").Append(VNN).Append("\n");
            sb.Append("  YAD: ").Append(YAD).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Travelers)obj);
        }

        /// <summary>
        /// Returns true if Travelers instances are equal
        /// </summary>
        /// <param name="other">Instance of Travelers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Travelers other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ADT == other.ADT ||
                    ADT != null &&
                    ADT.Equals(other.ADT)
                ) && 
                (
                    CHD == other.CHD ||
                    CHD != null &&
                    CHD.Equals(other.CHD)
                ) && 
                (
                    INF == other.INF ||
                    INF != null &&
                    INF.Equals(other.INF)
                ) && 
                (
                    V14 == other.V14 ||
                    V14 != null &&
                    V14.Equals(other.V14)
                ) && 
                (
                    VFR == other.VFR ||
                    VFR != null &&
                    VFR.Equals(other.VFR)
                ) && 
                (
                    VNF == other.VNF ||
                    VNF != null &&
                    VNF.Equals(other.VNF)
                ) && 
                (
                    VNN == other.VNN ||
                    VNN != null &&
                    VNN.Equals(other.VNN)
                ) && 
                (
                    YAD == other.YAD ||
                    YAD != null &&
                    YAD.Equals(other.YAD)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ADT != null)
                    hashCode = hashCode * 59 + ADT.GetHashCode();
                    if (CHD != null)
                    hashCode = hashCode * 59 + CHD.GetHashCode();
                    if (INF != null)
                    hashCode = hashCode * 59 + INF.GetHashCode();
                    if (V14 != null)
                    hashCode = hashCode * 59 + V14.GetHashCode();
                    if (VFR != null)
                    hashCode = hashCode * 59 + VFR.GetHashCode();
                    if (VNF != null)
                    hashCode = hashCode * 59 + VNF.GetHashCode();
                    if (VNN != null)
                    hashCode = hashCode * 59 + VNN.GetHashCode();
                    if (YAD != null)
                    hashCode = hashCode * 59 + YAD.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Travelers left, Travelers right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Travelers left, Travelers right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
