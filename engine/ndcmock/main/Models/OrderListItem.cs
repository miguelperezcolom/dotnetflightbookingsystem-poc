/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderListItem : IEquatable<OrderListItem>
    { 
        /// <summary>
        /// Gets or Sets Agency
        /// </summary>

        [DataMember(Name="agency")]
        public string Agency { get; set; }

        /// <summary>
        /// Order approve status (traveler_pending/traveler_rejected/manager_pending/manager_rejected/customer_ok)
        /// </summary>
        /// <value>Order approve status (traveler_pending/traveler_rejected/manager_pending/manager_rejected/customer_ok)</value>

        [DataMember(Name="approveStatus")]
        public string ApproveStatus { get; set; }

        /// <summary>
        /// Gets or Sets BookingDate
        /// </summary>

        [RegularExpression("/^$|(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/")]
        [DataMember(Name="bookingDate")]
        public string BookingDate { get; set; }

        /// <summary>
        /// Gets or Sets BookingType
        /// </summary>

        [DataMember(Name="bookingType")]
        public string BookingType { get; set; }

        /// <summary>
        /// Disruption status (ScheduledTimeChange/FlightCancellation)
        /// </summary>
        /// <value>Disruption status (ScheduledTimeChange/FlightCancellation)</value>

        [DataMember(Name="disruptionStatus")]
        public string DisruptionStatus { get; set; }

        /// <summary>
        /// Flight Segment information. Including departure, arrival and airline information.
        /// </summary>
        /// <value>Flight Segment information. Including departure, arrival and airline information.</value>

        [DataMember(Name="flights")]
        public List<Flight> Flights { get; set; }

        /// <summary>
        /// AirGateway order ID
        /// </summary>
        /// <value>AirGateway order ID</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>

        [DataMember(Name="orderID")]
        public string OrderID { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>

        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Passengers
        /// </summary>

        [DataMember(Name="passengers")]
        public List<Passenger> Passengers { get; set; }

        /// <summary>
        /// Payment time limit
        /// </summary>
        /// <value>Payment time limit</value>

        [DataMember(Name="paymentTimeLimit")]
        public string PaymentTimeLimit { get; set; }

        /// <summary>
        /// PNR
        /// </summary>
        /// <value>PNR</value>

        [DataMember(Name="pnr")]
        public string Pnr { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>

        [DataMember(Name="provider")]
        public string Provider { get; set; }

        /// <summary>
        /// Order status (Pending/Confirmed/Canceled/Voided/Refunded)
        /// </summary>
        /// <value>Order status (Pending/Confirmed/Canceled/Voided/Refunded)</value>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderListItem {\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  ApproveStatus: ").Append(ApproveStatus).Append("\n");
            sb.Append("  BookingDate: ").Append(BookingDate).Append("\n");
            sb.Append("  BookingType: ").Append(BookingType).Append("\n");
            sb.Append("  DisruptionStatus: ").Append(DisruptionStatus).Append("\n");
            sb.Append("  Flights: ").Append(Flights).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  PaymentTimeLimit: ").Append(PaymentTimeLimit).Append("\n");
            sb.Append("  Pnr: ").Append(Pnr).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderListItem)obj);
        }

        /// <summary>
        /// Returns true if OrderListItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderListItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Agency == other.Agency ||
                    Agency != null &&
                    Agency.Equals(other.Agency)
                ) && 
                (
                    ApproveStatus == other.ApproveStatus ||
                    ApproveStatus != null &&
                    ApproveStatus.Equals(other.ApproveStatus)
                ) && 
                (
                    BookingDate == other.BookingDate ||
                    BookingDate != null &&
                    BookingDate.Equals(other.BookingDate)
                ) && 
                (
                    BookingType == other.BookingType ||
                    BookingType != null &&
                    BookingType.Equals(other.BookingType)
                ) && 
                (
                    DisruptionStatus == other.DisruptionStatus ||
                    DisruptionStatus != null &&
                    DisruptionStatus.Equals(other.DisruptionStatus)
                ) && 
                (
                    Flights == other.Flights ||
                    Flights != null &&
                    Flights.SequenceEqual(other.Flights)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    OrderID == other.OrderID ||
                    OrderID != null &&
                    OrderID.Equals(other.OrderID)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Passengers == other.Passengers ||
                    Passengers != null &&
                    Passengers.SequenceEqual(other.Passengers)
                ) && 
                (
                    PaymentTimeLimit == other.PaymentTimeLimit ||
                    PaymentTimeLimit != null &&
                    PaymentTimeLimit.Equals(other.PaymentTimeLimit)
                ) && 
                (
                    Pnr == other.Pnr ||
                    Pnr != null &&
                    Pnr.Equals(other.Pnr)
                ) && 
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.Equals(other.Provider)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Agency != null)
                    hashCode = hashCode * 59 + Agency.GetHashCode();
                    if (ApproveStatus != null)
                    hashCode = hashCode * 59 + ApproveStatus.GetHashCode();
                    if (BookingDate != null)
                    hashCode = hashCode * 59 + BookingDate.GetHashCode();
                    if (BookingType != null)
                    hashCode = hashCode * 59 + BookingType.GetHashCode();
                    if (DisruptionStatus != null)
                    hashCode = hashCode * 59 + DisruptionStatus.GetHashCode();
                    if (Flights != null)
                    hashCode = hashCode * 59 + Flights.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (OrderID != null)
                    hashCode = hashCode * 59 + OrderID.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Passengers != null)
                    hashCode = hashCode * 59 + Passengers.GetHashCode();
                    if (PaymentTimeLimit != null)
                    hashCode = hashCode * 59 + PaymentTimeLimit.GetHashCode();
                    if (Pnr != null)
                    hashCode = hashCode * 59 + Pnr.GetHashCode();
                    if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderListItem left, OrderListItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderListItem left, OrderListItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
