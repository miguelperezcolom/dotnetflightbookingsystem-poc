/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderChangePayload : IEquatable<OrderChangePayload>
    { 
        /// <summary>
        /// A flag used in some cases of the OrderChange like accept the disruption of an order or split the order
        /// </summary>
        /// <value>A flag used in some cases of the OrderChange like accept the disruption of an order or split the order</value>

        [DataMember(Name="action")]
        public string Action { get; set; }

        /// <summary>
        /// AirGateway order ID
        /// </summary>
        /// <value>AirGateway order ID</value>
        [Required]
        
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PassengerUpdate
        /// </summary>

        [DataMember(Name="passengerUpdate")]
        public Passenger PassengerUpdate { get; set; }

        /// <summary>
        /// List of passengers
        /// </summary>
        /// <value>List of passengers</value>

        [DataMember(Name="passengers")]
        public List<Passenger> Passengers { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>

        [DataMember(Name="payment")]
        public Payment Payment { get; set; }

        /// <summary>
        /// Reshop offer ID from OrderReshop response
        /// </summary>
        /// <value>Reshop offer ID from OrderReshop response</value>

        [DataMember(Name="reshopOfferID")]
        public string ReshopOfferID { get; set; }

        /// <summary>
        /// List of service objects
        /// </summary>
        /// <value>List of service objects</value>

        [DataMember(Name="services")]
        public List<ServiceRequest> Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderChangePayload {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PassengerUpdate: ").Append(PassengerUpdate).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  ReshopOfferID: ").Append(ReshopOfferID).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderChangePayload)obj);
        }

        /// <summary>
        /// Returns true if OrderChangePayload instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderChangePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderChangePayload other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PassengerUpdate == other.PassengerUpdate ||
                    PassengerUpdate != null &&
                    PassengerUpdate.Equals(other.PassengerUpdate)
                ) && 
                (
                    Passengers == other.Passengers ||
                    Passengers != null &&
                    Passengers.SequenceEqual(other.Passengers)
                ) && 
                (
                    Payment == other.Payment ||
                    Payment != null &&
                    Payment.Equals(other.Payment)
                ) && 
                (
                    ReshopOfferID == other.ReshopOfferID ||
                    ReshopOfferID != null &&
                    ReshopOfferID.Equals(other.ReshopOfferID)
                ) && 
                (
                    Services == other.Services ||
                    Services != null &&
                    Services.SequenceEqual(other.Services)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PassengerUpdate != null)
                    hashCode = hashCode * 59 + PassengerUpdate.GetHashCode();
                    if (Passengers != null)
                    hashCode = hashCode * 59 + Passengers.GetHashCode();
                    if (Payment != null)
                    hashCode = hashCode * 59 + Payment.GetHashCode();
                    if (ReshopOfferID != null)
                    hashCode = hashCode * 59 + ReshopOfferID.GetHashCode();
                    if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderChangePayload left, OrderChangePayload right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderChangePayload left, OrderChangePayload right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
