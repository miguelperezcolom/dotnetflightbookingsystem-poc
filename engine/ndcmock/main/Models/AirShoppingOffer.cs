/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AirShoppingOffer : IEquatable<AirShoppingOffer>
    { 
        /// <summary>
        /// Offer created at unix time
        /// </summary>
        /// <value>Offer created at unix time</value>

        [DataMember(Name="createdAt")]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// List of disclosures corresponding to offer.
        /// </summary>
        /// <value>List of disclosures corresponding to offer.</value>

        [DataMember(Name="disclosures")]
        public List<Disclosure> Disclosures { get; set; }

        /// <summary>
        /// Error from provider
        /// </summary>
        /// <value>Error from provider</value>

        [DataMember(Name="error")]
        public string Error { get; set; }

        /// <summary>
        /// Flight Segment information. Including departure, arrival and airline information.
        /// </summary>
        /// <value>Flight Segment information. Including departure, arrival and airline information.</value>

        [DataMember(Name="flights")]
        public List<Flight> Flights { get; set; }

        /// <summary>
        /// Max number of stops
        /// </summary>
        /// <value>Max number of stops</value>

        [DataMember(Name="maxNumberOfStops")]
        public long? MaxNumberOfStops { get; set; }

        /// <summary>
        /// Offer identifier
        /// </summary>
        /// <value>Offer identifier</value>

        [DataMember(Name="offerID")]
        public string OfferID { get; set; }

        /// <summary>
        /// Offer type
        /// </summary>
        /// <value>Offer type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OfferTypeEnum
        {
            
            /// <summary>
            /// Enum OneWayEnum for oneWay
            /// </summary>
            [EnumMember(Value = "oneWay")]
            OneWayEnum = 1,
            
            /// <summary>
            /// Enum RoundTripEnum for roundTrip
            /// </summary>
            [EnumMember(Value = "roundTrip")]
            RoundTripEnum = 2,
            
            /// <summary>
            /// Enum OutboundEnum for outbound
            /// </summary>
            [EnumMember(Value = "outbound")]
            OutboundEnum = 3,
            
            /// <summary>
            /// Enum ReturnEnum for return
            /// </summary>
            [EnumMember(Value = "return")]
            ReturnEnum = 4
        }

        /// <summary>
        /// Offer type
        /// </summary>
        /// <value>Offer type</value>

        [DataMember(Name="offerType")]
        public OfferTypeEnum? OfferType { get; set; }

        /// <summary>
        /// 2 letter abbreviation of airline
        /// </summary>
        /// <value>2 letter abbreviation of airline</value>

        [StringLength(2, MinimumLength=2)]
        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Offer payment time limit, after this time created order will become expired
        /// </summary>
        /// <value>Offer payment time limit, after this time created order will become expired</value>

        [DataMember(Name="paymentTimeLimit")]
        public string PaymentTimeLimit { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// Gets or Sets PriceBreakdown
        /// </summary>

        [DataMember(Name="priceBreakdown")]
        public PriceBreakdown PriceBreakdown { get; set; }

        /// <summary>
        /// 2 letter abbreviation of airline
        /// </summary>
        /// <value>2 letter abbreviation of airline</value>

        [StringLength(2, MinimumLength=2)]
        [DataMember(Name="provider")]
        public string Provider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AirShoppingOffer {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Disclosures: ").Append(Disclosures).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Flights: ").Append(Flights).Append("\n");
            sb.Append("  MaxNumberOfStops: ").Append(MaxNumberOfStops).Append("\n");
            sb.Append("  OfferID: ").Append(OfferID).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PaymentTimeLimit: ").Append(PaymentTimeLimit).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceBreakdown: ").Append(PriceBreakdown).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AirShoppingOffer)obj);
        }

        /// <summary>
        /// Returns true if AirShoppingOffer instances are equal
        /// </summary>
        /// <param name="other">Instance of AirShoppingOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AirShoppingOffer other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Disclosures == other.Disclosures ||
                    Disclosures != null &&
                    Disclosures.SequenceEqual(other.Disclosures)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    Flights == other.Flights ||
                    Flights != null &&
                    Flights.SequenceEqual(other.Flights)
                ) && 
                (
                    MaxNumberOfStops == other.MaxNumberOfStops ||
                    MaxNumberOfStops != null &&
                    MaxNumberOfStops.Equals(other.MaxNumberOfStops)
                ) && 
                (
                    OfferID == other.OfferID ||
                    OfferID != null &&
                    OfferID.Equals(other.OfferID)
                ) && 
                (
                    OfferType == other.OfferType ||
                    OfferType != null &&
                    OfferType.Equals(other.OfferType)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    PaymentTimeLimit == other.PaymentTimeLimit ||
                    PaymentTimeLimit != null &&
                    PaymentTimeLimit.Equals(other.PaymentTimeLimit)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    PriceBreakdown == other.PriceBreakdown ||
                    PriceBreakdown != null &&
                    PriceBreakdown.Equals(other.PriceBreakdown)
                ) && 
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.Equals(other.Provider)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Disclosures != null)
                    hashCode = hashCode * 59 + Disclosures.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (Flights != null)
                    hashCode = hashCode * 59 + Flights.GetHashCode();
                    if (MaxNumberOfStops != null)
                    hashCode = hashCode * 59 + MaxNumberOfStops.GetHashCode();
                    if (OfferID != null)
                    hashCode = hashCode * 59 + OfferID.GetHashCode();
                    if (OfferType != null)
                    hashCode = hashCode * 59 + OfferType.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (PaymentTimeLimit != null)
                    hashCode = hashCode * 59 + PaymentTimeLimit.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (PriceBreakdown != null)
                    hashCode = hashCode * 59 + PriceBreakdown.GetHashCode();
                    if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AirShoppingOffer left, AirShoppingOffer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AirShoppingOffer left, AirShoppingOffer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
