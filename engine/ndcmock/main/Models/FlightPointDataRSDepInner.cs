/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FlightPointDataRSDepInner : IEquatable<FlightPointDataRSDepInner>
    { 
        /// <summary>
        /// Departure/Arrival airport IATA three letter code.
        /// </summary>
        /// <value>Departure/Arrival airport IATA three letter code.</value>
        [Required]
        
        [DataMember(Name="airportCode")]
        public string AirportCode { get; set; }

        /// <summary>
        /// Departure/Arrival airport name.
        /// </summary>
        /// <value>Departure/Arrival airport name.</value>

        [DataMember(Name="airportName")]
        public string AirportName { get; set; }

        /// <summary>
        /// Country ID data
        /// </summary>
        /// <value>Country ID data</value>

        [DataMember(Name="countryID")]
        public string CountryID { get; set; }

        /// <summary>
        /// Departure/Arrival date in format YYYY-MM-DD.
        /// </summary>
        /// <value>Departure/Arrival date in format YYYY-MM-DD.</value>

        [RegularExpression("/^$|(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/")]
        [DataMember(Name="date")]
        public string Date { get; set; }

        /// <summary>
        /// Parent Location data
        /// </summary>
        /// <value>Parent Location data</value>

        [DataMember(Name="parentLocation")]
        public string ParentLocation { get; set; }

        /// <summary>
        /// Departure/Arrival terminal.
        /// </summary>
        /// <value>Departure/Arrival terminal.</value>

        [DataMember(Name="terminalName")]
        public string TerminalName { get; set; }

        /// <summary>
        /// Preferred departure time in format HH:MM 24h.
        /// </summary>
        /// <value>Preferred departure time in format HH:MM 24h.</value>

        [RegularExpression("/^$|(\\d\\d):(\\d\\d)/")]
        [DataMember(Name="time")]
        public string Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightPointDataRSDepInner {\n");
            sb.Append("  AirportCode: ").Append(AirportCode).Append("\n");
            sb.Append("  AirportName: ").Append(AirportName).Append("\n");
            sb.Append("  CountryID: ").Append(CountryID).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ParentLocation: ").Append(ParentLocation).Append("\n");
            sb.Append("  TerminalName: ").Append(TerminalName).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlightPointDataRSDepInner)obj);
        }

        /// <summary>
        /// Returns true if FlightPointDataRSDepInner instances are equal
        /// </summary>
        /// <param name="other">Instance of FlightPointDataRSDepInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightPointDataRSDepInner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AirportCode == other.AirportCode ||
                    AirportCode != null &&
                    AirportCode.Equals(other.AirportCode)
                ) && 
                (
                    AirportName == other.AirportName ||
                    AirportName != null &&
                    AirportName.Equals(other.AirportName)
                ) && 
                (
                    CountryID == other.CountryID ||
                    CountryID != null &&
                    CountryID.Equals(other.CountryID)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    ParentLocation == other.ParentLocation ||
                    ParentLocation != null &&
                    ParentLocation.Equals(other.ParentLocation)
                ) && 
                (
                    TerminalName == other.TerminalName ||
                    TerminalName != null &&
                    TerminalName.Equals(other.TerminalName)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AirportCode != null)
                    hashCode = hashCode * 59 + AirportCode.GetHashCode();
                    if (AirportName != null)
                    hashCode = hashCode * 59 + AirportName.GetHashCode();
                    if (CountryID != null)
                    hashCode = hashCode * 59 + CountryID.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (ParentLocation != null)
                    hashCode = hashCode * 59 + ParentLocation.GetHashCode();
                    if (TerminalName != null)
                    hashCode = hashCode * 59 + TerminalName.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlightPointDataRSDepInner left, FlightPointDataRSDepInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlightPointDataRSDepInner left, FlightPointDataRSDepInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
