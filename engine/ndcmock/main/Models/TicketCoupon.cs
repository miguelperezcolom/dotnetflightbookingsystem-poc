/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TicketCoupon : IEquatable<TicketCoupon>
    { 
        /// <summary>
        /// Coupon date of service
        /// </summary>
        /// <value>Coupon date of service</value>

        [DataMember(Name="dateOfService")]
        public string DateOfService { get; set; }

        /// <summary>
        /// Coupon fareBasisCode
        /// </summary>
        /// <value>Coupon fareBasisCode</value>

        [DataMember(Name="fareBasisCode")]
        public string FareBasisCode { get; set; }

        /// <summary>
        /// Coupon media
        /// </summary>
        /// <value>Coupon media</value>

        [DataMember(Name="media")]
        public string Media { get; set; }

        /// <summary>
        /// Coupon number
        /// </summary>
        /// <value>Coupon number</value>

        [DataMember(Name="number")]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// Coupon ref
        /// </summary>
        /// <value>Coupon ref</value>

        [DataMember(Name="reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Coupon remark
        /// </summary>
        /// <value>Coupon remark</value>

        [DataMember(Name="remark")]
        public string Remark { get; set; }

        /// <summary>
        /// Gets or Sets Segment
        /// </summary>

        [DataMember(Name="segment")]
        public TicketCouponAirlineInfo Segment { get; set; }

        /// <summary>
        /// Coupon service references
        /// </summary>
        /// <value>Coupon service references</value>

        [DataMember(Name="serviceReferences")]
        public string ServiceReferences { get; set; }

        /// <summary>
        /// Coupon status code
        /// </summary>
        /// <value>Coupon status code</value>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Coupon status description
        /// </summary>
        /// <value>Coupon status description</value>

        [DataMember(Name="statusDefinition")]
        public string StatusDefinition { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>

        [DataMember(Name="valid")]
        public TicketCouponValid Valid { get; set; }

        /// <summary>
        /// Coupon validating airline
        /// </summary>
        /// <value>Coupon validating airline</value>

        [DataMember(Name="validatingAirline")]
        public string ValidatingAirline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TicketCoupon {\n");
            sb.Append("  DateOfService: ").Append(DateOfService).Append("\n");
            sb.Append("  FareBasisCode: ").Append(FareBasisCode).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  ServiceReferences: ").Append(ServiceReferences).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDefinition: ").Append(StatusDefinition).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  ValidatingAirline: ").Append(ValidatingAirline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TicketCoupon)obj);
        }

        /// <summary>
        /// Returns true if TicketCoupon instances are equal
        /// </summary>
        /// <param name="other">Instance of TicketCoupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TicketCoupon other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DateOfService == other.DateOfService ||
                    DateOfService != null &&
                    DateOfService.Equals(other.DateOfService)
                ) && 
                (
                    FareBasisCode == other.FareBasisCode ||
                    FareBasisCode != null &&
                    FareBasisCode.Equals(other.FareBasisCode)
                ) && 
                (
                    Media == other.Media ||
                    Media != null &&
                    Media.Equals(other.Media)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    Reference == other.Reference ||
                    Reference != null &&
                    Reference.Equals(other.Reference)
                ) && 
                (
                    Remark == other.Remark ||
                    Remark != null &&
                    Remark.Equals(other.Remark)
                ) && 
                (
                    Segment == other.Segment ||
                    Segment != null &&
                    Segment.Equals(other.Segment)
                ) && 
                (
                    ServiceReferences == other.ServiceReferences ||
                    ServiceReferences != null &&
                    ServiceReferences.Equals(other.ServiceReferences)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    StatusDefinition == other.StatusDefinition ||
                    StatusDefinition != null &&
                    StatusDefinition.Equals(other.StatusDefinition)
                ) && 
                (
                    Valid == other.Valid ||
                    Valid != null &&
                    Valid.Equals(other.Valid)
                ) && 
                (
                    ValidatingAirline == other.ValidatingAirline ||
                    ValidatingAirline != null &&
                    ValidatingAirline.Equals(other.ValidatingAirline)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DateOfService != null)
                    hashCode = hashCode * 59 + DateOfService.GetHashCode();
                    if (FareBasisCode != null)
                    hashCode = hashCode * 59 + FareBasisCode.GetHashCode();
                    if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                    if (Remark != null)
                    hashCode = hashCode * 59 + Remark.GetHashCode();
                    if (Segment != null)
                    hashCode = hashCode * 59 + Segment.GetHashCode();
                    if (ServiceReferences != null)
                    hashCode = hashCode * 59 + ServiceReferences.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (StatusDefinition != null)
                    hashCode = hashCode * 59 + StatusDefinition.GetHashCode();
                    if (Valid != null)
                    hashCode = hashCode * 59 + Valid.GetHashCode();
                    if (ValidatingAirline != null)
                    hashCode = hashCode * 59 + ValidatingAirline.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TicketCoupon left, TicketCoupon right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TicketCoupon left, TicketCoupon right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
