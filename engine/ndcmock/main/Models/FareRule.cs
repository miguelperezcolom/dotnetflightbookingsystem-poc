/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Fare Rules per segment and per each passenger type.
    /// </summary>
    [DataContract]
    public partial class FareRule : IEquatable<FareRule>
    { 
        /// <summary>
        /// The fare rule for the cancelability.
        /// </summary>
        /// <value>The fare rule for the cancelability.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CancelEnum
        {
            
            /// <summary>
            /// Enum Empty for 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,
            
            /// <summary>
            /// Enum AllowedEnum for Allowed
            /// </summary>
            [EnumMember(Value = "Allowed")]
            AllowedEnum = 2,
            
            /// <summary>
            /// Enum ForFeeEnum for For Fee
            /// </summary>
            [EnumMember(Value = "For Fee")]
            ForFeeEnum = 3,
            
            /// <summary>
            /// Enum NotAllowedEnum for Not Allowed
            /// </summary>
            [EnumMember(Value = "Not Allowed")]
            NotAllowedEnum = 4
        }

        /// <summary>
        /// The fare rule for the cancelability.
        /// </summary>
        /// <value>The fare rule for the cancelability.</value>

        [DataMember(Name="cancel")]
        public CancelEnum? Cancel { get; set; }

        /// <summary>
        /// The fare rule for the changeability.
        /// </summary>
        /// <value>The fare rule for the changeability.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ChangeEnum
        {
            
            /// <summary>
            /// Enum Empty for 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,
            
            /// <summary>
            /// Enum AllowedEnum for Allowed
            /// </summary>
            [EnumMember(Value = "Allowed")]
            AllowedEnum = 2,
            
            /// <summary>
            /// Enum ForFeeEnum for For Fee
            /// </summary>
            [EnumMember(Value = "For Fee")]
            ForFeeEnum = 3,
            
            /// <summary>
            /// Enum NotAllowedEnum for Not Allowed
            /// </summary>
            [EnumMember(Value = "Not Allowed")]
            NotAllowedEnum = 4
        }

        /// <summary>
        /// The fare rule for the changeability.
        /// </summary>
        /// <value>The fare rule for the changeability.</value>

        [DataMember(Name="change")]
        public ChangeEnum? Change { get; set; }

        /// <summary>
        /// The references tot the passengers involved in the group of FareReules.
        /// </summary>
        /// <value>The references tot the passengers involved in the group of FareReules.</value>

        [DataMember(Name="passengerRef")]
        public string PassengerRef { get; set; }

        /// <summary>
        /// The type of the passengers related to this group of FareRule.
        /// </summary>
        /// <value>The type of the passengers related to this group of FareRule.</value>

        [DataMember(Name="passengerType")]
        public string PassengerType { get; set; }

        /// <summary>
        /// Fare rule penalties.
        /// </summary>
        /// <value>Fare rule penalties.</value>

        [DataMember(Name="penalties")]
        public List<Penalty> Penalties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareRule {\n");
            sb.Append("  Cancel: ").Append(Cancel).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  PassengerRef: ").Append(PassengerRef).Append("\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  Penalties: ").Append(Penalties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FareRule)obj);
        }

        /// <summary>
        /// Returns true if FareRule instances are equal
        /// </summary>
        /// <param name="other">Instance of FareRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareRule other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cancel == other.Cancel ||
                    Cancel != null &&
                    Cancel.Equals(other.Cancel)
                ) && 
                (
                    Change == other.Change ||
                    Change != null &&
                    Change.Equals(other.Change)
                ) && 
                (
                    PassengerRef == other.PassengerRef ||
                    PassengerRef != null &&
                    PassengerRef.Equals(other.PassengerRef)
                ) && 
                (
                    PassengerType == other.PassengerType ||
                    PassengerType != null &&
                    PassengerType.Equals(other.PassengerType)
                ) && 
                (
                    Penalties == other.Penalties ||
                    Penalties != null &&
                    Penalties.SequenceEqual(other.Penalties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cancel != null)
                    hashCode = hashCode * 59 + Cancel.GetHashCode();
                    if (Change != null)
                    hashCode = hashCode * 59 + Change.GetHashCode();
                    if (PassengerRef != null)
                    hashCode = hashCode * 59 + PassengerRef.GetHashCode();
                    if (PassengerType != null)
                    hashCode = hashCode * 59 + PassengerType.GetHashCode();
                    if (Penalties != null)
                    hashCode = hashCode * 59 + Penalties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FareRule left, FareRule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FareRule left, FareRule right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
