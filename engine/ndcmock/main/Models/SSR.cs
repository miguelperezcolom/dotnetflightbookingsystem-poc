/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SSR : IEquatable<SSR>
    { 
        /// <summary>
        /// Gets or Sets BookingInstructions
        /// </summary>

        [DataMember(Name="bookingInstructions")]
        public BookingInstructions BookingInstructions { get; set; }

        /// <summary>
        /// Special service request code
        /// </summary>
        /// <value>Special service request code</value>

        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Special service request description
        /// </summary>
        /// <value>Special service request description</value>

        [DataMember(Name="desc")]
        public string Desc { get; set; }

        /// <summary>
        /// Passenger type SSR applies to
        /// </summary>
        /// <value>Passenger type SSR applies to</value>

        [DataMember(Name="passengerType")]
        public string PassengerType { get; set; }

        /// <summary>
        /// Special service request text required flag
        /// </summary>
        /// <value>Special service request text required flag</value>

        [DataMember(Name="text_required")]
        public bool? TextRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SSR {\n");
            sb.Append("  BookingInstructions: ").Append(BookingInstructions).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  TextRequired: ").Append(TextRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SSR)obj);
        }

        /// <summary>
        /// Returns true if SSR instances are equal
        /// </summary>
        /// <param name="other">Instance of SSR to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SSR other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BookingInstructions == other.BookingInstructions ||
                    BookingInstructions != null &&
                    BookingInstructions.Equals(other.BookingInstructions)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Desc == other.Desc ||
                    Desc != null &&
                    Desc.Equals(other.Desc)
                ) && 
                (
                    PassengerType == other.PassengerType ||
                    PassengerType != null &&
                    PassengerType.Equals(other.PassengerType)
                ) && 
                (
                    TextRequired == other.TextRequired ||
                    TextRequired != null &&
                    TextRequired.Equals(other.TextRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BookingInstructions != null)
                    hashCode = hashCode * 59 + BookingInstructions.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Desc != null)
                    hashCode = hashCode * 59 + Desc.GetHashCode();
                    if (PassengerType != null)
                    hashCode = hashCode * 59 + PassengerType.GetHashCode();
                    if (TextRequired != null)
                    hashCode = hashCode * 59 + TextRequired.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SSR left, SSR right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SSR left, SSR right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
