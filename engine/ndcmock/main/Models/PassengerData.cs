/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PassengerData : IEquatable<PassengerData>
    { 
        /// <summary>
        /// Gets or Sets Address
        /// </summary>

        [DataMember(Name="address")]
        public Address Address { get; set; }

        /// <summary>
        /// Birthdate using format YYYY-MM-DD.
        /// </summary>
        /// <value>Birthdate using format YYYY-MM-DD.</value>
        [Required]
        
        [RegularExpression("/^$|(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/")]
        [DataMember(Name="birthdate")]
        public string Birthdate { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>

        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FqtvInfo
        /// </summary>

        [DataMember(Name="fqtvInfo")]
        public FQTVInfo FqtvInfo { get; set; }

        /// <summary>
        /// Valid values: 
        /// </summary>
        /// <value>Valid values: </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum MaleEnum for Male
            /// </summary>
            [EnumMember(Value = "Male")]
            MaleEnum = 1,
            
            /// <summary>
            /// Enum FemaleEnum for Female
            /// </summary>
            [EnumMember(Value = "Female")]
            FemaleEnum = 2,
            
            /// <summary>
            /// Enum Empty for 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3
        }

        /// <summary>
        /// Valid values: 
        /// </summary>
        /// <value>Valid values: </value>
        [Required]
        
        [DataMember(Name="gender")]
        public GenderEnum? Gender { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        /// <value>Phone number</value>

        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets ResidenceCountryCode
        /// </summary>

        [DataMember(Name="residenceCountryCode")]
        public string ResidenceCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [Required]
        
        [DataMember(Name="surname")]
        public string Surname { get; set; }

        /// <summary>
        /// Valid Values: 
        /// </summary>
        /// <value>Valid Values: </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TitleEnum
        {
            
            /// <summary>
            /// Enum MREnum for MR
            /// </summary>
            [EnumMember(Value = "MR")]
            MREnum = 1,
            
            /// <summary>
            /// Enum MSEnum for MS
            /// </summary>
            [EnumMember(Value = "MS")]
            MSEnum = 2,
            
            /// <summary>
            /// Enum MRSEnum for MRS
            /// </summary>
            [EnumMember(Value = "MRS")]
            MRSEnum = 3
        }

        /// <summary>
        /// Valid Values: 
        /// </summary>
        /// <value>Valid Values: </value>

        [DataMember(Name="title")]
        public TitleEnum? Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PassengerData {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Birthdate: ").Append(Birthdate).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FqtvInfo: ").Append(FqtvInfo).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  ResidenceCountryCode: ").Append(ResidenceCountryCode).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PassengerData)obj);
        }

        /// <summary>
        /// Returns true if PassengerData instances are equal
        /// </summary>
        /// <param name="other">Instance of PassengerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PassengerData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Birthdate == other.Birthdate ||
                    Birthdate != null &&
                    Birthdate.Equals(other.Birthdate)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    FqtvInfo == other.FqtvInfo ||
                    FqtvInfo != null &&
                    FqtvInfo.Equals(other.FqtvInfo)
                ) && 
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    ResidenceCountryCode == other.ResidenceCountryCode ||
                    ResidenceCountryCode != null &&
                    ResidenceCountryCode.Equals(other.ResidenceCountryCode)
                ) && 
                (
                    Surname == other.Surname ||
                    Surname != null &&
                    Surname.Equals(other.Surname)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Birthdate != null)
                    hashCode = hashCode * 59 + Birthdate.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (FqtvInfo != null)
                    hashCode = hashCode * 59 + FqtvInfo.GetHashCode();
                    if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (ResidenceCountryCode != null)
                    hashCode = hashCode * 59 + ResidenceCountryCode.GetHashCode();
                    if (Surname != null)
                    hashCode = hashCode * 59 + Surname.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PassengerData left, PassengerData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PassengerData left, PassengerData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
