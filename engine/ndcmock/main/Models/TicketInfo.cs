/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TicketInfo : IEquatable<TicketInfo>
    { 
        /// <summary>
        /// Ticket coupons&#39; details
        /// </summary>
        /// <value>Ticket coupons&#39; details</value>

        [DataMember(Name="coupons")]
        public List<TicketCoupon> Coupons { get; set; }

        /// <summary>
        /// Ticket issue date
        /// </summary>
        /// <value>Ticket issue date</value>

        [RegularExpression("/(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/")]
        [DataMember(Name="dateOfIssue")]
        public string DateOfIssue { get; set; }

        /// <summary>
        /// Number of tickets for passenger
        /// </summary>
        /// <value>Number of tickets for passenger</value>

        [DataMember(Name="numberOfBooklets")]
        public long? NumberOfBooklets { get; set; }

        /// <summary>
        /// Passenger reference
        /// </summary>
        /// <value>Passenger reference</value>

        [DataMember(Name="passengerRef")]
        public string PassengerRef { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// Ticket number of passenger
        /// </summary>
        /// <value>Ticket number of passenger</value>

        [DataMember(Name="ticketNumber")]
        public string TicketNumber { get; set; }

        /// <summary>
        /// Ticket issue time
        /// </summary>
        /// <value>Ticket issue time</value>

        [RegularExpression("/(\\d\\d):(\\d\\d)/")]
        [DataMember(Name="timeOfIssue")]
        public string TimeOfIssue { get; set; }

        /// <summary>
        /// Type of ticket
        /// </summary>
        /// <value>Type of ticket</value>

        [DataMember(Name="typeCode")]
        public string TypeCode { get; set; }

        /// <summary>
        /// The meaning of the type of ticket
        /// </summary>
        /// <value>The meaning of the type of ticket</value>

        [DataMember(Name="typeCodeDefinition")]
        public string TypeCodeDefinition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TicketInfo {\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  DateOfIssue: ").Append(DateOfIssue).Append("\n");
            sb.Append("  NumberOfBooklets: ").Append(NumberOfBooklets).Append("\n");
            sb.Append("  PassengerRef: ").Append(PassengerRef).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  TimeOfIssue: ").Append(TimeOfIssue).Append("\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  TypeCodeDefinition: ").Append(TypeCodeDefinition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TicketInfo)obj);
        }

        /// <summary>
        /// Returns true if TicketInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TicketInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TicketInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Coupons == other.Coupons ||
                    Coupons != null &&
                    Coupons.SequenceEqual(other.Coupons)
                ) && 
                (
                    DateOfIssue == other.DateOfIssue ||
                    DateOfIssue != null &&
                    DateOfIssue.Equals(other.DateOfIssue)
                ) && 
                (
                    NumberOfBooklets == other.NumberOfBooklets ||
                    NumberOfBooklets != null &&
                    NumberOfBooklets.Equals(other.NumberOfBooklets)
                ) && 
                (
                    PassengerRef == other.PassengerRef ||
                    PassengerRef != null &&
                    PassengerRef.Equals(other.PassengerRef)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    TicketNumber == other.TicketNumber ||
                    TicketNumber != null &&
                    TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    TimeOfIssue == other.TimeOfIssue ||
                    TimeOfIssue != null &&
                    TimeOfIssue.Equals(other.TimeOfIssue)
                ) && 
                (
                    TypeCode == other.TypeCode ||
                    TypeCode != null &&
                    TypeCode.Equals(other.TypeCode)
                ) && 
                (
                    TypeCodeDefinition == other.TypeCodeDefinition ||
                    TypeCodeDefinition != null &&
                    TypeCodeDefinition.Equals(other.TypeCodeDefinition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Coupons != null)
                    hashCode = hashCode * 59 + Coupons.GetHashCode();
                    if (DateOfIssue != null)
                    hashCode = hashCode * 59 + DateOfIssue.GetHashCode();
                    if (NumberOfBooklets != null)
                    hashCode = hashCode * 59 + NumberOfBooklets.GetHashCode();
                    if (PassengerRef != null)
                    hashCode = hashCode * 59 + PassengerRef.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (TicketNumber != null)
                    hashCode = hashCode * 59 + TicketNumber.GetHashCode();
                    if (TimeOfIssue != null)
                    hashCode = hashCode * 59 + TimeOfIssue.GetHashCode();
                    if (TypeCode != null)
                    hashCode = hashCode * 59 + TypeCode.GetHashCode();
                    if (TypeCodeDefinition != null)
                    hashCode = hashCode * 59 + TypeCodeDefinition.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TicketInfo left, TicketInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TicketInfo left, TicketInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
