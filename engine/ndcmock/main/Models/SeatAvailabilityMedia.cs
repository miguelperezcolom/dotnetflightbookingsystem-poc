/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// SeatAvailabilityMedia media type (default view)
    /// </summary>
    [DataContract]
    public partial class SeatAvailabilityMedia : IEquatable<SeatAvailabilityMedia>
    { 
        /// <summary>
        /// Exit rows position
        /// </summary>
        /// <value>Exit rows position</value>

        [DataMember(Name="exits")]
        public List<ExitSeat> Exits { get; set; }

        /// <summary>
        /// The owner of the segment flight that the SeatAvailability is requesting
        /// </summary>
        /// <value>The owner of the segment flight that the SeatAvailability is requesting</value>

        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Info about seat display (rows and columns)
        /// </summary>
        /// <value>Info about seat display (rows and columns)</value>

        [DataMember(Name="seatDisplay")]
        public List<SeatDisplay> SeatDisplay { get; set; }

        /// <summary>
        /// Info about seats location, description, characteristics, price...
        /// </summary>
        /// <value>Info about seats location, description, characteristics, price...</value>

        [DataMember(Name="seatList")]
        public List<Seat> SeatList { get; set; }

        /// <summary>
        /// Info about flight segments
        /// </summary>
        /// <value>Info about flight segments</value>

        [DataMember(Name="segments")]
        public List<FlightSegment> Segments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeatAvailabilityMedia {\n");
            sb.Append("  Exits: ").Append(Exits).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  SeatDisplay: ").Append(SeatDisplay).Append("\n");
            sb.Append("  SeatList: ").Append(SeatList).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SeatAvailabilityMedia)obj);
        }

        /// <summary>
        /// Returns true if SeatAvailabilityMedia instances are equal
        /// </summary>
        /// <param name="other">Instance of SeatAvailabilityMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeatAvailabilityMedia other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Exits == other.Exits ||
                    Exits != null &&
                    Exits.SequenceEqual(other.Exits)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    SeatDisplay == other.SeatDisplay ||
                    SeatDisplay != null &&
                    SeatDisplay.SequenceEqual(other.SeatDisplay)
                ) && 
                (
                    SeatList == other.SeatList ||
                    SeatList != null &&
                    SeatList.SequenceEqual(other.SeatList)
                ) && 
                (
                    Segments == other.Segments ||
                    Segments != null &&
                    Segments.SequenceEqual(other.Segments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Exits != null)
                    hashCode = hashCode * 59 + Exits.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (SeatDisplay != null)
                    hashCode = hashCode * 59 + SeatDisplay.GetHashCode();
                    if (SeatList != null)
                    hashCode = hashCode * 59 + SeatList.GetHashCode();
                    if (Segments != null)
                    hashCode = hashCode * 59 + Segments.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SeatAvailabilityMedia left, SeatAvailabilityMedia right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SeatAvailabilityMedia left, SeatAvailabilityMedia right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
