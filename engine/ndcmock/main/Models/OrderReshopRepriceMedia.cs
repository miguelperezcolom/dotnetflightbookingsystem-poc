/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// OrderReshopRepriceMedia media type (default view)
    /// </summary>
    [DataContract]
    public partial class OrderReshopRepriceMedia : IEquatable<OrderReshopRepriceMedia>
    { 
        /// <summary>
        /// A hash of surcharges indexed by the credit card type.
        /// </summary>
        /// <value>A hash of surcharges indexed by the credit card type.</value>

        [DataMember(Name="cardSurcharges")]
        public Object CardSurcharges { get; set; }

        /// <summary>
        /// Gets or Sets Disclosures
        /// </summary>

        [DataMember(Name="disclosures")]
        public List<Disclosure> Disclosures { get; set; }

        /// <summary>
        /// Flight Segment information. Including departure, arrival and airline information.
        /// </summary>
        /// <value>Flight Segment information. Including departure, arrival and airline information.</value>

        [DataMember(Name="flights")]
        public List<Flight> Flights { get; set; }

        /// <summary>
        /// The ID for this offer
        /// </summary>
        /// <value>The ID for this offer</value>

        [DataMember(Name="offerID")]
        public string OfferID { get; set; }

        /// <summary>
        /// The code of the provider that is really offering the flight
        /// </summary>
        /// <value>The code of the provider that is really offering the flight</value>

        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>

        [DataMember(Name="warnings")]
        public List<OrderLog> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderReshopRepriceMedia {\n");
            sb.Append("  CardSurcharges: ").Append(CardSurcharges).Append("\n");
            sb.Append("  Disclosures: ").Append(Disclosures).Append("\n");
            sb.Append("  Flights: ").Append(Flights).Append("\n");
            sb.Append("  OfferID: ").Append(OfferID).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderReshopRepriceMedia)obj);
        }

        /// <summary>
        /// Returns true if OrderReshopRepriceMedia instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderReshopRepriceMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderReshopRepriceMedia other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CardSurcharges == other.CardSurcharges ||
                    CardSurcharges != null &&
                    CardSurcharges.Equals(other.CardSurcharges)
                ) && 
                (
                    Disclosures == other.Disclosures ||
                    Disclosures != null &&
                    Disclosures.SequenceEqual(other.Disclosures)
                ) && 
                (
                    Flights == other.Flights ||
                    Flights != null &&
                    Flights.SequenceEqual(other.Flights)
                ) && 
                (
                    OfferID == other.OfferID ||
                    OfferID != null &&
                    OfferID.Equals(other.OfferID)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CardSurcharges != null)
                    hashCode = hashCode * 59 + CardSurcharges.GetHashCode();
                    if (Disclosures != null)
                    hashCode = hashCode * 59 + Disclosures.GetHashCode();
                    if (Flights != null)
                    hashCode = hashCode * 59 + Flights.GetHashCode();
                    if (OfferID != null)
                    hashCode = hashCode * 59 + OfferID.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderReshopRepriceMedia left, OrderReshopRepriceMedia right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderReshopRepriceMedia left, OrderReshopRepriceMedia right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
