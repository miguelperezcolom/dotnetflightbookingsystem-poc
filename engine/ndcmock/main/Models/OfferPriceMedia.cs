/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// OfferPriceMedia media type (default view)
    /// </summary>
    [DataContract]
    public partial class OfferPriceMedia : IEquatable<OfferPriceMedia>
    { 
        /// <summary>
        /// Gets or Sets AllowedPaymentMethods
        /// </summary>

        [DataMember(Name="allowedPaymentMethods")]
        public AllowedPaymentMethods AllowedPaymentMethods { get; set; }

        /// <summary>
        /// Gets or Sets AllowedRequests
        /// </summary>

        [DataMember(Name="allowedRequests")]
        public OfferPriceAllowedRequests AllowedRequests { get; set; }

        /// <summary>
        /// A hash of surcharges indexed by the credit card type.
        /// </summary>
        /// <value>A hash of surcharges indexed by the credit card type.</value>

        [DataMember(Name="cardSurcharges")]
        public Object CardSurcharges { get; set; }

        /// <summary>
        /// Unix time of created datetime
        /// </summary>
        /// <value>Unix time of created datetime</value>

        [DataMember(Name="createdAt")]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Disclosures
        /// </summary>

        [DataMember(Name="disclosures")]
        public List<Disclosure> Disclosures { get; set; }

        /// <summary>
        /// Gets or Sets Discounts
        /// </summary>

        [DataMember(Name="discounts")]
        public Discount Discounts { get; set; }

        /// <summary>
        /// A Bundle of fields which are not mandatory for all airlines, in that way, the API will check the airline config and return them.
        /// </summary>
        /// <value>A Bundle of fields which are not mandatory for all airlines, in that way, the API will check the airline config and return them.</value>

        [DataMember(Name="extraInfoMandatory")]
        public List<string> ExtraInfoMandatory { get; set; }

        /// <summary>
        /// Flight Segment information. Including departure, arrival and airline information.
        /// </summary>
        /// <value>Flight Segment information. Including departure, arrival and airline information.</value>

        [DataMember(Name="flights")]
        public List<Flight> Flights { get; set; }

        /// <summary>
        /// Offer expiration time
        /// </summary>
        /// <value>Offer expiration time</value>

        [DataMember(Name="offerExpiration")]
        public string OfferExpiration { get; set; }

        /// <summary>
        /// The ID for this offer
        /// </summary>
        /// <value>The ID for this offer</value>

        [DataMember(Name="offerID")]
        public string OfferID { get; set; }

        /// <summary>
        /// The code of the provider that is really offering the flight
        /// </summary>
        /// <value>The code of the provider that is really offering the flight</value>

        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// List of referenced travelers
        /// </summary>
        /// <value>List of referenced travelers</value>

        [DataMember(Name="passengers")]
        public List<Passenger> Passengers { get; set; }

        /// <summary>
        /// Payment time limit
        /// </summary>
        /// <value>Payment time limit</value>

        [DataMember(Name="paymentTimeLimit")]
        public string PaymentTimeLimit { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// The ID of the response. Usually needed on the OrderCreate request (few providers don´t need it).
        /// </summary>
        /// <value>The ID of the response. Usually needed on the OrderCreate request (few providers don´t need it).</value>

        [DataMember(Name="shoppingResponseID")]
        public string ShoppingResponseID { get; set; }

        /// <summary>
        /// List of ancillaries allowed on pre-booking stage
        /// </summary>
        /// <value>List of ancillaries allowed on pre-booking stage</value>

        [DataMember(Name="specialServices")]
        public List<SSR> SpecialServices { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>

        [DataMember(Name="warnings")]
        public List<OrderLog> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferPriceMedia {\n");
            sb.Append("  AllowedPaymentMethods: ").Append(AllowedPaymentMethods).Append("\n");
            sb.Append("  AllowedRequests: ").Append(AllowedRequests).Append("\n");
            sb.Append("  CardSurcharges: ").Append(CardSurcharges).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Disclosures: ").Append(Disclosures).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  ExtraInfoMandatory: ").Append(ExtraInfoMandatory).Append("\n");
            sb.Append("  Flights: ").Append(Flights).Append("\n");
            sb.Append("  OfferExpiration: ").Append(OfferExpiration).Append("\n");
            sb.Append("  OfferID: ").Append(OfferID).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  PaymentTimeLimit: ").Append(PaymentTimeLimit).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ShoppingResponseID: ").Append(ShoppingResponseID).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OfferPriceMedia)obj);
        }

        /// <summary>
        /// Returns true if OfferPriceMedia instances are equal
        /// </summary>
        /// <param name="other">Instance of OfferPriceMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferPriceMedia other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowedPaymentMethods == other.AllowedPaymentMethods ||
                    AllowedPaymentMethods != null &&
                    AllowedPaymentMethods.Equals(other.AllowedPaymentMethods)
                ) && 
                (
                    AllowedRequests == other.AllowedRequests ||
                    AllowedRequests != null &&
                    AllowedRequests.Equals(other.AllowedRequests)
                ) && 
                (
                    CardSurcharges == other.CardSurcharges ||
                    CardSurcharges != null &&
                    CardSurcharges.Equals(other.CardSurcharges)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Disclosures == other.Disclosures ||
                    Disclosures != null &&
                    Disclosures.SequenceEqual(other.Disclosures)
                ) && 
                (
                    Discounts == other.Discounts ||
                    Discounts != null &&
                    Discounts.Equals(other.Discounts)
                ) && 
                (
                    ExtraInfoMandatory == other.ExtraInfoMandatory ||
                    ExtraInfoMandatory != null &&
                    ExtraInfoMandatory.SequenceEqual(other.ExtraInfoMandatory)
                ) && 
                (
                    Flights == other.Flights ||
                    Flights != null &&
                    Flights.SequenceEqual(other.Flights)
                ) && 
                (
                    OfferExpiration == other.OfferExpiration ||
                    OfferExpiration != null &&
                    OfferExpiration.Equals(other.OfferExpiration)
                ) && 
                (
                    OfferID == other.OfferID ||
                    OfferID != null &&
                    OfferID.Equals(other.OfferID)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Passengers == other.Passengers ||
                    Passengers != null &&
                    Passengers.SequenceEqual(other.Passengers)
                ) && 
                (
                    PaymentTimeLimit == other.PaymentTimeLimit ||
                    PaymentTimeLimit != null &&
                    PaymentTimeLimit.Equals(other.PaymentTimeLimit)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    ShoppingResponseID == other.ShoppingResponseID ||
                    ShoppingResponseID != null &&
                    ShoppingResponseID.Equals(other.ShoppingResponseID)
                ) && 
                (
                    SpecialServices == other.SpecialServices ||
                    SpecialServices != null &&
                    SpecialServices.SequenceEqual(other.SpecialServices)
                ) && 
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AllowedPaymentMethods != null)
                    hashCode = hashCode * 59 + AllowedPaymentMethods.GetHashCode();
                    if (AllowedRequests != null)
                    hashCode = hashCode * 59 + AllowedRequests.GetHashCode();
                    if (CardSurcharges != null)
                    hashCode = hashCode * 59 + CardSurcharges.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Disclosures != null)
                    hashCode = hashCode * 59 + Disclosures.GetHashCode();
                    if (Discounts != null)
                    hashCode = hashCode * 59 + Discounts.GetHashCode();
                    if (ExtraInfoMandatory != null)
                    hashCode = hashCode * 59 + ExtraInfoMandatory.GetHashCode();
                    if (Flights != null)
                    hashCode = hashCode * 59 + Flights.GetHashCode();
                    if (OfferExpiration != null)
                    hashCode = hashCode * 59 + OfferExpiration.GetHashCode();
                    if (OfferID != null)
                    hashCode = hashCode * 59 + OfferID.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Passengers != null)
                    hashCode = hashCode * 59 + Passengers.GetHashCode();
                    if (PaymentTimeLimit != null)
                    hashCode = hashCode * 59 + PaymentTimeLimit.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (ShoppingResponseID != null)
                    hashCode = hashCode * 59 + ShoppingResponseID.GetHashCode();
                    if (SpecialServices != null)
                    hashCode = hashCode * 59 + SpecialServices.GetHashCode();
                    if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OfferPriceMedia left, OfferPriceMedia right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OfferPriceMedia left, OfferPriceMedia right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
