/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExitSeat : IEquatable<ExitSeat>
    { 
        /// <summary>
        /// If the exit is on the right or in the left of the plane
        /// </summary>
        /// <value>If the exit is on the right or in the left of the plane</value>

        [DataMember(Name="position")]
        public string Position { get; set; }

        /// <summary>
        /// The row where the exit in placed
        /// </summary>
        /// <value>The row where the exit in placed</value>

        [DataMember(Name="row")]
        public long? Row { get; set; }

        /// <summary>
        /// The resference to the segment 
        /// </summary>
        /// <value>The resference to the segment </value>

        [DataMember(Name="segmentID")]
        public string SegmentID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExitSeat {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Row: ").Append(Row).Append("\n");
            sb.Append("  SegmentID: ").Append(SegmentID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExitSeat)obj);
        }

        /// <summary>
        /// Returns true if ExitSeat instances are equal
        /// </summary>
        /// <param name="other">Instance of ExitSeat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExitSeat other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) && 
                (
                    Row == other.Row ||
                    Row != null &&
                    Row.Equals(other.Row)
                ) && 
                (
                    SegmentID == other.SegmentID ||
                    SegmentID != null &&
                    SegmentID.Equals(other.SegmentID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (Row != null)
                    hashCode = hashCode * 59 + Row.GetHashCode();
                    if (SegmentID != null)
                    hashCode = hashCode * 59 + SegmentID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExitSeat left, ExitSeat right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExitSeat left, ExitSeat right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
