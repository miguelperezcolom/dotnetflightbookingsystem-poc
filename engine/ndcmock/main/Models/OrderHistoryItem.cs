/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderHistoryItem : IEquatable<OrderHistoryItem>
    { 
        /// <summary>
        /// Agency
        /// </summary>
        /// <value>Agency</value>

        [DataMember(Name="agency")]
        public string Agency { get; set; }

        /// <summary>
        /// Agent
        /// </summary>
        /// <value>Agent</value>

        [DataMember(Name="agent")]
        public string Agent { get; set; }

        /// <summary>
        /// Generic details object
        /// </summary>
        /// <value>Generic details object</value>

        [DataMember(Name="details")]
        public Object Details { get; set; }

        /// <summary>
        /// Event ID
        /// </summary>
        /// <value>Event ID</value>

        [DataMember(Name="eventID")]
        public string EventID { get; set; }

        /// <summary>
        /// Event time
        /// </summary>
        /// <value>Event time</value>

        [DataMember(Name="eventTime")]
        public string EventTime { get; set; }

        /// <summary>
        /// AirGateway order ID
        /// </summary>
        /// <value>AirGateway order ID</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// Transaction type
        /// </summary>
        /// <value>Transaction type</value>

        [DataMember(Name="transactionType")]
        public string TransactionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderHistoryItem {\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  EventID: ").Append(EventID).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderHistoryItem)obj);
        }

        /// <summary>
        /// Returns true if OrderHistoryItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderHistoryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderHistoryItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Agency == other.Agency ||
                    Agency != null &&
                    Agency.Equals(other.Agency)
                ) && 
                (
                    Agent == other.Agent ||
                    Agent != null &&
                    Agent.Equals(other.Agent)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.Equals(other.Details)
                ) && 
                (
                    EventID == other.EventID ||
                    EventID != null &&
                    EventID.Equals(other.EventID)
                ) && 
                (
                    EventTime == other.EventTime ||
                    EventTime != null &&
                    EventTime.Equals(other.EventTime)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    TransactionType == other.TransactionType ||
                    TransactionType != null &&
                    TransactionType.Equals(other.TransactionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Agency != null)
                    hashCode = hashCode * 59 + Agency.GetHashCode();
                    if (Agent != null)
                    hashCode = hashCode * 59 + Agent.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (EventID != null)
                    hashCode = hashCode * 59 + EventID.GetHashCode();
                    if (EventTime != null)
                    hashCode = hashCode * 59 + EventTime.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (TransactionType != null)
                    hashCode = hashCode * 59 + TransactionType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderHistoryItem left, OrderHistoryItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderHistoryItem left, OrderHistoryItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
