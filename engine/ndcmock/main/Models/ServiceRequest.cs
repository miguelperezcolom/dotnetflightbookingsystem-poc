/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Service Request
    /// </summary>
    [DataContract]
    public partial class ServiceRequest : IEquatable<ServiceRequest>
    { 
        /// <summary>
        /// Action (Create/Cancel)
        /// </summary>
        /// <value>Action (Create/Cancel)</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum CreateEnum for Create
            /// </summary>
            [EnumMember(Value = "Create")]
            CreateEnum = 1,
            
            /// <summary>
            /// Enum CancelEnum for Cancel
            /// </summary>
            [EnumMember(Value = "Cancel")]
            CancelEnum = 2
        }

        /// <summary>
        /// Action (Create/Cancel)
        /// </summary>
        /// <value>Action (Create/Cancel)</value>
        [Required]
        
        [DataMember(Name="action")]
        public ActionEnum? Action { get; set; }

        /// <summary>
        /// Service owner
        /// </summary>
        /// <value>Service owner</value>

        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Baggage type (deprecated)
        /// </summary>
        /// <value>Baggage type (deprecated)</value>

        [DataMember(Name="quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets SeatLocation
        /// </summary>

        [DataMember(Name="seatLocation")]
        public SeatLocation SeatLocation { get; set; }

        /// <summary>
        /// Segment reference
        /// </summary>
        /// <value>Segment reference</value>

        [DataMember(Name="segmentReference")]
        public string SegmentReference { get; set; }

        /// <summary>
        /// Type of service (ID)
        /// </summary>
        /// <value>Type of service (ID)</value>

        [DataMember(Name="serviceID")]
        public string ServiceID { get; set; }

        /// <summary>
        /// Used in some services to indicate the quantity of some extra kilos in the baggage, the type of pet, etc...
        /// </summary>
        /// <value>Used in some services to indicate the quantity of some extra kilos in the baggage, the type of pet, etc...</value>

        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Traveler reference
        /// </summary>
        /// <value>Traveler reference</value>

        [DataMember(Name="travelerReference")]
        public string TravelerReference { get; set; }

        /// <summary>
        /// Type of service object. Required for service object validation
        /// </summary>
        /// <value>Type of service object. Required for service object validation</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SeatEnum for seat
            /// </summary>
            [EnumMember(Value = "seat")]
            SeatEnum = 1,
            
            /// <summary>
            /// Enum ServiceEnum for service
            /// </summary>
            [EnumMember(Value = "service")]
            ServiceEnum = 2
        }

        /// <summary>
        /// Type of service object. Required for service object validation
        /// </summary>
        /// <value>Type of service object. Required for service object validation</value>
        [Required]
        
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SeatLocation: ").Append(SeatLocation).Append("\n");
            sb.Append("  SegmentReference: ").Append(SegmentReference).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TravelerReference: ").Append(TravelerReference).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceRequest)obj);
        }

        /// <summary>
        /// Returns true if ServiceRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    SeatLocation == other.SeatLocation ||
                    SeatLocation != null &&
                    SeatLocation.Equals(other.SeatLocation)
                ) && 
                (
                    SegmentReference == other.SegmentReference ||
                    SegmentReference != null &&
                    SegmentReference.Equals(other.SegmentReference)
                ) && 
                (
                    ServiceID == other.ServiceID ||
                    ServiceID != null &&
                    ServiceID.Equals(other.ServiceID)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    TravelerReference == other.TravelerReference ||
                    TravelerReference != null &&
                    TravelerReference.Equals(other.TravelerReference)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (SeatLocation != null)
                    hashCode = hashCode * 59 + SeatLocation.GetHashCode();
                    if (SegmentReference != null)
                    hashCode = hashCode * 59 + SegmentReference.GetHashCode();
                    if (ServiceID != null)
                    hashCode = hashCode * 59 + ServiceID.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (TravelerReference != null)
                    hashCode = hashCode * 59 + TravelerReference.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceRequest left, ServiceRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceRequest left, ServiceRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
