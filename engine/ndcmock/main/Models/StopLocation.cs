/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Stop location details
    /// </summary>
    [DataContract]
    public partial class StopLocation : IEquatable<StopLocation>
    { 
        /// <summary>
        /// Airport code
        /// </summary>
        /// <value>Airport code</value>

        [DataMember(Name="airportCode")]
        public string AirportCode { get; set; }

        /// <summary>
        /// Airport name
        /// </summary>
        /// <value>Airport name</value>

        [DataMember(Name="airportName")]
        public string AirportName { get; set; }

        /// <summary>
        /// Arrival date
        /// </summary>
        /// <value>Arrival date</value>

        [DataMember(Name="arrivalDate")]
        public string ArrivalDate { get; set; }

        /// <summary>
        /// Arrival time
        /// </summary>
        /// <value>Arrival time</value>

        [DataMember(Name="arrivalTime")]
        public string ArrivalTime { get; set; }

        /// <summary>
        /// Departure date
        /// </summary>
        /// <value>Departure date</value>

        [DataMember(Name="departureDate")]
        public string DepartureDate { get; set; }

        /// <summary>
        /// Departure time
        /// </summary>
        /// <value>Departure time</value>

        [DataMember(Name="departureTime")]
        public string DepartureTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StopLocation {\n");
            sb.Append("  AirportCode: ").Append(AirportCode).Append("\n");
            sb.Append("  AirportName: ").Append(AirportName).Append("\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StopLocation)obj);
        }

        /// <summary>
        /// Returns true if StopLocation instances are equal
        /// </summary>
        /// <param name="other">Instance of StopLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StopLocation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AirportCode == other.AirportCode ||
                    AirportCode != null &&
                    AirportCode.Equals(other.AirportCode)
                ) && 
                (
                    AirportName == other.AirportName ||
                    AirportName != null &&
                    AirportName.Equals(other.AirportName)
                ) && 
                (
                    ArrivalDate == other.ArrivalDate ||
                    ArrivalDate != null &&
                    ArrivalDate.Equals(other.ArrivalDate)
                ) && 
                (
                    ArrivalTime == other.ArrivalTime ||
                    ArrivalTime != null &&
                    ArrivalTime.Equals(other.ArrivalTime)
                ) && 
                (
                    DepartureDate == other.DepartureDate ||
                    DepartureDate != null &&
                    DepartureDate.Equals(other.DepartureDate)
                ) && 
                (
                    DepartureTime == other.DepartureTime ||
                    DepartureTime != null &&
                    DepartureTime.Equals(other.DepartureTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AirportCode != null)
                    hashCode = hashCode * 59 + AirportCode.GetHashCode();
                    if (AirportName != null)
                    hashCode = hashCode * 59 + AirportName.GetHashCode();
                    if (ArrivalDate != null)
                    hashCode = hashCode * 59 + ArrivalDate.GetHashCode();
                    if (ArrivalTime != null)
                    hashCode = hashCode * 59 + ArrivalTime.GetHashCode();
                    if (DepartureDate != null)
                    hashCode = hashCode * 59 + DepartureDate.GetHashCode();
                    if (DepartureTime != null)
                    hashCode = hashCode * 59 + DepartureTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StopLocation left, StopLocation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StopLocation left, StopLocation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
