/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FlightSegment : IEquatable<FlightSegment>
    { 
        /// <summary>
        /// Origin destination reference
        /// </summary>
        /// <value>Origin destination reference</value>

        [DataMember(Name="ODRef")]
        public string ODRef { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>

        [DataMember(Name="detail")]
        public FlightDetail Detail { get; set; }

        /// <summary>
        /// Gets or Sets Equipment
        /// </summary>
        [Required]
        
        [DataMember(Name="equipment")]
        public Equipment Equipment { get; set; }

        /// <summary>
        /// The code of the fare
        /// </summary>
        /// <value>The code of the fare</value>

        [DataMember(Name="fareCode")]
        public string FareCode { get; set; }

        /// <summary>
        /// Flight number of airline
        /// </summary>
        /// <value>Flight number of airline</value>

        [DataMember(Name="flightNumber")]
        public string FlightNumber { get; set; }

        /// <summary>
        /// Gets or Sets MarketingCarrier
        /// </summary>
        [Required]
        
        [DataMember(Name="marketingCarrier")]
        public MarketingCarrier MarketingCarrier { get; set; }

        /// <summary>
        /// Gets or Sets OperatingCarrier
        /// </summary>

        [DataMember(Name="operatingCarrier")]
        public OperatingCarrier OperatingCarrier { get; set; }

        /// <summary>
        /// Gets or Sets OriginDestination
        /// </summary>
        [Required]
        
        [DataMember(Name="originDestination")]
        public OriginDestinationRSInner OriginDestination { get; set; }

        /// <summary>
        /// Segment ID
        /// </summary>
        /// <value>Segment ID</value>

        [DataMember(Name="segmentID")]
        public string SegmentID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightSegment {\n");
            sb.Append("  ODRef: ").Append(ODRef).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("  FareCode: ").Append(FareCode).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  MarketingCarrier: ").Append(MarketingCarrier).Append("\n");
            sb.Append("  OperatingCarrier: ").Append(OperatingCarrier).Append("\n");
            sb.Append("  OriginDestination: ").Append(OriginDestination).Append("\n");
            sb.Append("  SegmentID: ").Append(SegmentID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlightSegment)obj);
        }

        /// <summary>
        /// Returns true if FlightSegment instances are equal
        /// </summary>
        /// <param name="other">Instance of FlightSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightSegment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ODRef == other.ODRef ||
                    ODRef != null &&
                    ODRef.Equals(other.ODRef)
                ) && 
                (
                    Detail == other.Detail ||
                    Detail != null &&
                    Detail.Equals(other.Detail)
                ) && 
                (
                    Equipment == other.Equipment ||
                    Equipment != null &&
                    Equipment.Equals(other.Equipment)
                ) && 
                (
                    FareCode == other.FareCode ||
                    FareCode != null &&
                    FareCode.Equals(other.FareCode)
                ) && 
                (
                    FlightNumber == other.FlightNumber ||
                    FlightNumber != null &&
                    FlightNumber.Equals(other.FlightNumber)
                ) && 
                (
                    MarketingCarrier == other.MarketingCarrier ||
                    MarketingCarrier != null &&
                    MarketingCarrier.Equals(other.MarketingCarrier)
                ) && 
                (
                    OperatingCarrier == other.OperatingCarrier ||
                    OperatingCarrier != null &&
                    OperatingCarrier.Equals(other.OperatingCarrier)
                ) && 
                (
                    OriginDestination == other.OriginDestination ||
                    OriginDestination != null &&
                    OriginDestination.Equals(other.OriginDestination)
                ) && 
                (
                    SegmentID == other.SegmentID ||
                    SegmentID != null &&
                    SegmentID.Equals(other.SegmentID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ODRef != null)
                    hashCode = hashCode * 59 + ODRef.GetHashCode();
                    if (Detail != null)
                    hashCode = hashCode * 59 + Detail.GetHashCode();
                    if (Equipment != null)
                    hashCode = hashCode * 59 + Equipment.GetHashCode();
                    if (FareCode != null)
                    hashCode = hashCode * 59 + FareCode.GetHashCode();
                    if (FlightNumber != null)
                    hashCode = hashCode * 59 + FlightNumber.GetHashCode();
                    if (MarketingCarrier != null)
                    hashCode = hashCode * 59 + MarketingCarrier.GetHashCode();
                    if (OperatingCarrier != null)
                    hashCode = hashCode * 59 + OperatingCarrier.GetHashCode();
                    if (OriginDestination != null)
                    hashCode = hashCode * 59 + OriginDestination.GetHashCode();
                    if (SegmentID != null)
                    hashCode = hashCode * 59 + SegmentID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlightSegment left, FlightSegment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlightSegment left, FlightSegment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
