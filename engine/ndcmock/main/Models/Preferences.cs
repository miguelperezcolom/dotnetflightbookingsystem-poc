/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Preferences : IEquatable<Preferences>
    { 
        /// <summary>
        /// Cabin preference from PADIS 9873.<br/>  Please take note that not all airlines accept all attributes, check our <a href=https://github.com/AirGateway/NDC-Gateway-Developer-Guide#cabin-preferences>developer guide</a>.<br/>  1-First Class,<br/>  2-Second Class (Business),<br/>  3-Third class, economy,<br/>  4-Economy/coach premium,<br/>  5-Economy/coach,<br/>  6-Economy/coach discounted,<br/>  7-All
        /// </summary>
        /// <value>Cabin preference from PADIS 9873.<br/>  Please take note that not all airlines accept all attributes, check our <a href=https://github.com/AirGateway/NDC-Gateway-Developer-Guide#cabin-preferences>developer guide</a>.<br/>  1-First Class,<br/>  2-Second Class (Business),<br/>  3-Third class, economy,<br/>  4-Economy/coach premium,<br/>  5-Economy/coach,<br/>  6-Economy/coach discounted,<br/>  7-All</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum List
        {
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1Enum = 1,
            
            /// <summary>
            /// Enum _2Enum for 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2Enum = 2,
            
            /// <summary>
            /// Enum _3Enum for 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3Enum = 3,
            
            /// <summary>
            /// Enum _4Enum for 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4Enum = 4,
            
            /// <summary>
            /// Enum _5Enum for 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5Enum = 5,
            
            /// <summary>
            /// Enum _6Enum for 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6Enum = 6,
            
            /// <summary>
            /// Enum _7Enum for 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7Enum = 7,
            
            /// <summary>
            /// Enum Empty for 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 8
        }

        /// <summary>
        /// Gets or Sets Cabin
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CabinEnum
        {
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1Enum = 1,
            
            /// <summary>
            /// Enum _2Enum for 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2Enum = 2,
            
            /// <summary>
            /// Enum _3Enum for 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3Enum = 3,
            
            /// <summary>
            /// Enum _4Enum for 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4Enum = 4,
            
            /// <summary>
            /// Enum _5Enum for 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5Enum = 5,
            
            /// <summary>
            /// Enum _6Enum for 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6Enum = 6,
            
            /// <summary>
            /// Enum _7Enum for 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7Enum = 7,
            
            /// <summary>
            /// Enum Empty for 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 8
        }

        /// <summary>
        /// Cabin preference from PADIS 9873.&lt;br/&gt;  Please take note that not all airlines accept all attributes, check our &lt;a href&#x3D;https://github.com/AirGateway/NDC-Gateway-Developer-Guide#cabin-preferences&gt;developer guide&lt;/a&gt;.&lt;br/&gt;  1-First Class,&lt;br/&gt;  2-Second Class (Business),&lt;br/&gt;  3-Third class, economy,&lt;br/&gt;  4-Economy/coach premium,&lt;br/&gt;  5-Economy/coach,&lt;br/&gt;  6-Economy/coach discounted,&lt;br/&gt;  7-All
        /// </summary>
        /// <value>Cabin preference from PADIS 9873.&lt;br/&gt;  Please take note that not all airlines accept all attributes, check our &lt;a href&#x3D;https://github.com/AirGateway/NDC-Gateway-Developer-Guide#cabin-preferences&gt;developer guide&lt;/a&gt;.&lt;br/&gt;  1-First Class,&lt;br/&gt;  2-Second Class (Business),&lt;br/&gt;  3-Third class, economy,&lt;br/&gt;  4-Economy/coach premium,&lt;br/&gt;  5-Economy/coach,&lt;br/&gt;  6-Economy/coach discounted,&lt;br/&gt;  7-All</value>

        [DataMember(Name="cabin")]
        public List<CabinEnum> Cabin { get; set; }

        /// <summary>
        /// Gets or Sets Discounts
        /// </summary>

        [DataMember(Name="discounts")]
        public Discount Discounts { get; set; }

        /// <summary>
        /// Gets or Sets Fare
        /// </summary>

        [DataMember(Name="fare")]
        public Fare Fare { get; set; }

        /// <summary>
        /// List of fare preferences from PADIS 9910.&lt;/br&gt;   Please take note that not all airlines accept all attributes, check our &lt;a href&#x3D;https://github.com/AirGateway/NDC-Gateway-Developer-Guide#fare-preferences&gt;developer guide&lt;/a&gt;.&lt;br/&gt;   70J-Published fares,&lt;br/&gt;   749-Negotiated fares,&lt;br/&gt;   754-Flexible Fare,&lt;br/&gt;   758-Private Fare,&lt;br/&gt;   759-Restricted Fare
        /// </summary>
        /// <value>List of fare preferences from PADIS 9910.&lt;/br&gt;   Please take note that not all airlines accept all attributes, check our &lt;a href&#x3D;https://github.com/AirGateway/NDC-Gateway-Developer-Guide#fare-preferences&gt;developer guide&lt;/a&gt;.&lt;br/&gt;   70J-Published fares,&lt;br/&gt;   749-Negotiated fares,&lt;br/&gt;   754-Flexible Fare,&lt;br/&gt;   758-Private Fare,&lt;br/&gt;   759-Restricted Fare</value>

        [DataMember(Name="fareList")]
        public List<Fare> FareList { get; set; }

        /// <summary>
        /// NonStop preferences for search. If this is present, it will search flights without stops.
        /// </summary>
        /// <value>NonStop preferences for search. If this is present, it will search flights without stops.</value>

        [DataMember(Name="nonStop")]
        public bool? NonStop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Preferences {\n");
            sb.Append("  Cabin: ").Append(Cabin).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  Fare: ").Append(Fare).Append("\n");
            sb.Append("  FareList: ").Append(FareList).Append("\n");
            sb.Append("  NonStop: ").Append(NonStop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Preferences)obj);
        }

        /// <summary>
        /// Returns true if Preferences instances are equal
        /// </summary>
        /// <param name="other">Instance of Preferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Preferences other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cabin == other.Cabin ||
                    Cabin != null &&
                    Cabin.SequenceEqual(other.Cabin)
                ) && 
                (
                    Discounts == other.Discounts ||
                    Discounts != null &&
                    Discounts.Equals(other.Discounts)
                ) && 
                (
                    Fare == other.Fare ||
                    Fare != null &&
                    Fare.Equals(other.Fare)
                ) && 
                (
                    FareList == other.FareList ||
                    FareList != null &&
                    FareList.SequenceEqual(other.FareList)
                ) && 
                (
                    NonStop == other.NonStop ||
                    NonStop != null &&
                    NonStop.Equals(other.NonStop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cabin != null)
                    hashCode = hashCode * 59 + Cabin.GetHashCode();
                    if (Discounts != null)
                    hashCode = hashCode * 59 + Discounts.GetHashCode();
                    if (Fare != null)
                    hashCode = hashCode * 59 + Fare.GetHashCode();
                    if (FareList != null)
                    hashCode = hashCode * 59 + FareList.GetHashCode();
                    if (NonStop != null)
                    hashCode = hashCode * 59 + NonStop.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Preferences left, Preferences right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Preferences left, Preferences right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
