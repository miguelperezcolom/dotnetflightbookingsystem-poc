/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    { 
        /// <summary>
        /// VI (Visa), CA (MasterCard), JCB (JCB), AX (American Express), DC (Diners Club), CB (Carte blanche), TP (UATP/AIRPLUS), GK (Lufthansa GK Card), AU (Carte Aurore), not all credit cards are supported by all airlines, required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>VI (Visa), CA (MasterCard), JCB (JCB), AX (American Express), DC (Diners Club), CB (Carte blanche), TP (UATP/AIRPLUS), GK (Lufthansa GK Card), AU (Carte Aurore), not all credit cards are supported by all airlines, required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="cardCode")]
        public string CardCode { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderEmail
        /// </summary>

        [DataMember(Name="cardHolderEmail")]
        public string CardHolderEmail { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderName
        /// </summary>

        [DataMember(Name="cardHolderName")]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderSurname
        /// </summary>

        [DataMember(Name="cardHolderSurname")]
        public string CardHolderSurname { get; set; }

        /// <summary>
        /// Valid Values: 
        /// </summary>
        /// <value>Valid Values: </value>

        [DataMember(Name="cardHolderTitle")]
        public string CardHolderTitle { get; set; }

        /// <summary>
        /// CC Number, required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>CC Number, required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="cardNumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// CC (Credit)/DB (Debit), required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>CC (Credit)/DB (Debit), required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="cardType")]
        public string CardType { get; set; }

        /// <summary>
        /// Gets or Sets CashEmail
        /// </summary>

        [DataMember(Name="cashEmail")]
        public string CashEmail { get; set; }

        /// <summary>
        /// Gets or Sets CashName
        /// </summary>

        [DataMember(Name="cashName")]
        public string CashName { get; set; }

        /// <summary>
        /// Gets or Sets CashSurname
        /// </summary>

        [DataMember(Name="cashSurname")]
        public string CashSurname { get; set; }

        /// <summary>
        /// Valid Values: 
        /// </summary>
        /// <value>Valid Values: </value>

        [DataMember(Name="cashTitle")]
        public string CashTitle { get; set; }

        /// <summary>
        /// Card Holder Billing city, required if method &#x3D;&#x3D; \&quot;card\&quot; 
        /// </summary>
        /// <value>Card Holder Billing city, required if method &#x3D;&#x3D; \&quot;card\&quot; </value>

        [DataMember(Name="cityName")]
        public string CityName { get; set; }

        /// <summary>
        /// Card Holder Billing country code , required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>Card Holder Billing country code , required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Expiration
        /// </summary>

        [DataMember(Name="expiration")]
        public string Expiration { get; set; }

        /// <summary>
        /// Possible values: \&quot;card\&quot;, \&quot;agencyCard\&quot;, \&quot;agencyCash\&quot;. Set this to \&quot;card\&quot; if you pay with card, otherwise it has to be \&quot;cash\&quot;. Contact us to setup cash on file and card on file
        /// </summary>
        /// <value>Possible values: \&quot;card\&quot;, \&quot;agencyCard\&quot;, \&quot;agencyCash\&quot;. Set this to \&quot;card\&quot; if you pay with card, otherwise it has to be \&quot;cash\&quot;. Contact us to setup cash on file and card on file</value>
        [Required]
        
        [DataMember(Name="method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets PassengerType
        /// </summary>

        [DataMember(Name="passengerType")]
        public string PassengerType { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        /// <value>Phone number</value>

        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Card Holder Billing postal code, required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>Card Holder Billing postal code, required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// CVV/CVC code, required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>CVV/CVC code, required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="seriesCode")]
        public string SeriesCode { get; set; }

        /// <summary>
        /// The code of the state or province where the bank office issued the card, required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>The code of the state or province where the bank office issued the card, required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="stateProv")]
        public string StateProv { get; set; }

        /// <summary>
        /// Card Holder Billing address, required if method &#x3D;&#x3D; \&quot;card\&quot;
        /// </summary>
        /// <value>Card Holder Billing address, required if method &#x3D;&#x3D; \&quot;card\&quot;</value>

        [DataMember(Name="street1")]
        public string Street1 { get; set; }

        /// <summary>
        /// Gets or Sets Street2
        /// </summary>

        [DataMember(Name="street2")]
        public string Street2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  CardCode: ").Append(CardCode).Append("\n");
            sb.Append("  CardHolderEmail: ").Append(CardHolderEmail).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  CardHolderSurname: ").Append(CardHolderSurname).Append("\n");
            sb.Append("  CardHolderTitle: ").Append(CardHolderTitle).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CashEmail: ").Append(CashEmail).Append("\n");
            sb.Append("  CashName: ").Append(CashName).Append("\n");
            sb.Append("  CashSurname: ").Append(CashSurname).Append("\n");
            sb.Append("  CashTitle: ").Append(CashTitle).Append("\n");
            sb.Append("  CityName: ").Append(CityName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  SeriesCode: ").Append(SeriesCode).Append("\n");
            sb.Append("  StateProv: ").Append(StateProv).Append("\n");
            sb.Append("  Street1: ").Append(Street1).Append("\n");
            sb.Append("  Street2: ").Append(Street2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CardCode == other.CardCode ||
                    CardCode != null &&
                    CardCode.Equals(other.CardCode)
                ) && 
                (
                    CardHolderEmail == other.CardHolderEmail ||
                    CardHolderEmail != null &&
                    CardHolderEmail.Equals(other.CardHolderEmail)
                ) && 
                (
                    CardHolderName == other.CardHolderName ||
                    CardHolderName != null &&
                    CardHolderName.Equals(other.CardHolderName)
                ) && 
                (
                    CardHolderSurname == other.CardHolderSurname ||
                    CardHolderSurname != null &&
                    CardHolderSurname.Equals(other.CardHolderSurname)
                ) && 
                (
                    CardHolderTitle == other.CardHolderTitle ||
                    CardHolderTitle != null &&
                    CardHolderTitle.Equals(other.CardHolderTitle)
                ) && 
                (
                    CardNumber == other.CardNumber ||
                    CardNumber != null &&
                    CardNumber.Equals(other.CardNumber)
                ) && 
                (
                    CardType == other.CardType ||
                    CardType != null &&
                    CardType.Equals(other.CardType)
                ) && 
                (
                    CashEmail == other.CashEmail ||
                    CashEmail != null &&
                    CashEmail.Equals(other.CashEmail)
                ) && 
                (
                    CashName == other.CashName ||
                    CashName != null &&
                    CashName.Equals(other.CashName)
                ) && 
                (
                    CashSurname == other.CashSurname ||
                    CashSurname != null &&
                    CashSurname.Equals(other.CashSurname)
                ) && 
                (
                    CashTitle == other.CashTitle ||
                    CashTitle != null &&
                    CashTitle.Equals(other.CashTitle)
                ) && 
                (
                    CityName == other.CityName ||
                    CityName != null &&
                    CityName.Equals(other.CityName)
                ) && 
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    Expiration == other.Expiration ||
                    Expiration != null &&
                    Expiration.Equals(other.Expiration)
                ) && 
                (
                    Method == other.Method ||
                    Method != null &&
                    Method.Equals(other.Method)
                ) && 
                (
                    PassengerType == other.PassengerType ||
                    PassengerType != null &&
                    PassengerType.Equals(other.PassengerType)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    SeriesCode == other.SeriesCode ||
                    SeriesCode != null &&
                    SeriesCode.Equals(other.SeriesCode)
                ) && 
                (
                    StateProv == other.StateProv ||
                    StateProv != null &&
                    StateProv.Equals(other.StateProv)
                ) && 
                (
                    Street1 == other.Street1 ||
                    Street1 != null &&
                    Street1.Equals(other.Street1)
                ) && 
                (
                    Street2 == other.Street2 ||
                    Street2 != null &&
                    Street2.Equals(other.Street2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CardCode != null)
                    hashCode = hashCode * 59 + CardCode.GetHashCode();
                    if (CardHolderEmail != null)
                    hashCode = hashCode * 59 + CardHolderEmail.GetHashCode();
                    if (CardHolderName != null)
                    hashCode = hashCode * 59 + CardHolderName.GetHashCode();
                    if (CardHolderSurname != null)
                    hashCode = hashCode * 59 + CardHolderSurname.GetHashCode();
                    if (CardHolderTitle != null)
                    hashCode = hashCode * 59 + CardHolderTitle.GetHashCode();
                    if (CardNumber != null)
                    hashCode = hashCode * 59 + CardNumber.GetHashCode();
                    if (CardType != null)
                    hashCode = hashCode * 59 + CardType.GetHashCode();
                    if (CashEmail != null)
                    hashCode = hashCode * 59 + CashEmail.GetHashCode();
                    if (CashName != null)
                    hashCode = hashCode * 59 + CashName.GetHashCode();
                    if (CashSurname != null)
                    hashCode = hashCode * 59 + CashSurname.GetHashCode();
                    if (CashTitle != null)
                    hashCode = hashCode * 59 + CashTitle.GetHashCode();
                    if (CityName != null)
                    hashCode = hashCode * 59 + CityName.GetHashCode();
                    if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                    if (Expiration != null)
                    hashCode = hashCode * 59 + Expiration.GetHashCode();
                    if (Method != null)
                    hashCode = hashCode * 59 + Method.GetHashCode();
                    if (PassengerType != null)
                    hashCode = hashCode * 59 + PassengerType.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                    if (SeriesCode != null)
                    hashCode = hashCode * 59 + SeriesCode.GetHashCode();
                    if (StateProv != null)
                    hashCode = hashCode * 59 + StateProv.GetHashCode();
                    if (Street1 != null)
                    hashCode = hashCode * 59 + Street1.GetHashCode();
                    if (Street2 != null)
                    hashCode = hashCode * 59 + Street2.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
