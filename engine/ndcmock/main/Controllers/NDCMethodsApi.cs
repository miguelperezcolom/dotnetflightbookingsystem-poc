/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NDCMethodsApiController : ControllerBase
    { 
        /// <summary>
        /// Post AirDocIssue
        /// </summary>
        /// <remarks>AirDocIssue the ability to pay for the held booking.</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/AirDocIssue")]
        [ValidateModelState]
        [SwaggerOperation("AirDocIssuePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderCreateMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult AirDocIssuePost([FromHeader][Required()]string aGProviders, [FromBody]AirDocIssuePayloadPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderCreateMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderCreateMedia>(exampleJson)
            : default(OrderCreateMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post AirShopping
        /// </summary>
        /// <remarks>Get a list of offers for provided O&amp;D, dates and travelers.   There are three types of AirShopping request:&lt;br&gt; &lt;b&gt;(one-way)&lt;/b&gt; -&gt; For this airshopping, the array of OriginDestination´s must have only one element.&lt;/br&gt;   &lt;b&gt;(round-trip)&lt;/b&gt; -&gt; For this airshopping, the array of OriginDestination´s must have only two elements, and the arrival of the second element must be the same that the departure of the first element.&lt;/br&gt;   &lt;b&gt;(multi-city)&lt;/b&gt; -&gt; For this airshopping, the array of OriginDestination´s can have an unlimited quantity of elements.&lt;/br&gt;   This method allows async behaviour by sending &lt;b&gt;AG-Connection&lt;/b&gt; header with &lt;b&gt;keep-alive&lt;/b&gt; value. If a request is received with this header, response will be real-time &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/JSON_Streaming\&quot;&gt;json streaming&lt;/a&gt; so API will return offers as soon as they are received from providers and parsed. Streaming responses are line delimited JSON. You can &lt;a href&#x3D;\&quot;https://api.airgateway.work/streaming-json-example.json\&quot;&gt;see an example here&lt;/a&gt;.&lt;/br&gt;   If AG-Connection is not sent, all responses from providers will be parsed together (it will be slow since it needs to wait for all provider&#39;s responses) and there will be only a response with format specified here.&lt;br&gt;   As an additional header option you can control maximum per provider offers in response. Use &lt;b&gt;AG-Per-Provider-Limit&lt;/b&gt; header with integer number value.</remarks>
        /// <param name="aGProviders">Provider IDs list or * for all</param>
        /// <param name="payload">AirShoppingPayload is the type for AirShopping endpoint request body</param>
        /// <param name="aGNoCache">Don&#39;t use cache for answer</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/AirShopping")]
        [ValidateModelState]
        [SwaggerOperation("AirShoppingPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AirShoppingMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult AirShoppingPost([FromHeader][Required()]string aGProviders, [FromBody]AirShoppingPayload payload, [FromHeader]string aGNoCache)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AirShoppingMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AirShoppingMedia>(exampleJson)
            : default(AirShoppingMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OfferPrice
        /// </summary>
        /// <remarks>OfferPrice performs an specific detailed info query on a precise flight.</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OfferPrice")]
        [ValidateModelState]
        [SwaggerOperation("OfferPricePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OfferPriceMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OfferPricePost([FromHeader][Required()]string aGProviders, [FromBody]OfferPricePayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OfferPriceMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OfferPriceMedia>(exampleJson)
            : default(OfferPriceMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderCancel
        /// </summary>
        /// <remarks>OrderCancel returns cancelled order. </remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderCancel")]
        [ValidateModelState]
        [SwaggerOperation("OrderCancelPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderCancelMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderCancelPost([FromHeader][Required()]string aGProviders, [FromBody]OrderCancelPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderCancelMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderCancelMedia>(exampleJson)
            : default(OrderCancelMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderChange
        /// </summary>
        /// <remarks>The OrderChange amends existing order/PNR, and returns amended order details.</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderChange")]
        [ValidateModelState]
        [SwaggerOperation("OrderChangePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderCreateMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderChangePost([FromHeader][Required()]string aGProviders, [FromBody]OrderChangePayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderCreateMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderCreateMedia>(exampleJson)
            : default(OrderCreateMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderCreate
        /// </summary>
        /// <remarks>The OrderCreate makes a purchase request for the selected flight, and returns an OrderID (some providers also return a PNR), along with some flight data, such as the Origins-Destinations listing or the passenger list.</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderCreate")]
        [ValidateModelState]
        [SwaggerOperation("OrderCreatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderCreateMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderCreatePost([FromHeader][Required()]string aGProviders, [FromBody]OrderCreatePayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderCreateMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderCreateMedia>(exampleJson)
            : default(OrderCreateMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderReshop
        /// </summary>
        /// <remarks>OrderReshop returns offers avaialble for provided order ID and different date.</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderReshop")]
        [ValidateModelState]
        [SwaggerOperation("OrderReshopPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderReshopMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderReshopPost([FromHeader][Required()]string aGProviders, [FromBody]OrderReshopPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderReshopMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderReshopMedia>(exampleJson)
            : default(OrderReshopMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderReshopRefund
        /// </summary>
        
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderReshopRefund")]
        [ValidateModelState]
        [SwaggerOperation("OrderReshopRefundPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderReshopRefundMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderReshopRefundPost([FromHeader][Required()]string aGProviders, [FromBody]OrderReshopRefundPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderReshopRefundMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderReshopRefundMedia>(exampleJson)
            : default(OrderReshopRefundMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderReshopReprice
        /// </summary>
        /// <remarks>OrderReshopReprice returns price for selected OrderReshop offer.</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderReshopReprice")]
        [ValidateModelState]
        [SwaggerOperation("OrderReshopRepricePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderReshopRepriceMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderReshopRepricePost([FromHeader][Required()]string aGProviders, [FromBody]OrderReshopRepricePayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderReshopRepriceMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderReshopRepriceMedia>(exampleJson)
            : default(OrderReshopRepriceMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderRetrieve
        /// </summary>
        /// <remarks>OrderRetrieve returns an order information of existing order. </remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload">OrderRetrievePayload is the type for OrderRetrieve endpoint request body</param>
        /// <param name="aGNoCacheOR">Don&#39;t use cache for answer</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderRetrieve")]
        [ValidateModelState]
        [SwaggerOperation("OrderRetrievePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderCreateMedia), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderRetrievePost([FromHeader][Required()]string aGProviders, [FromBody]OrderRetrievePayload payload, [FromHeader]string aGNoCacheOR)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderCreateMedia));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderCreateMedia>(exampleJson)
            : default(OrderCreateMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post SeatAvailability
        /// </summary>
        /// <remarks>SeatAvailability returns a list of seat, price of these seats, its location and some more info like, for example, if a seat can be occupied by infants or only adults.</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload">SeatAvailability data</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/SeatAvailability")]
        [ValidateModelState]
        [SwaggerOperation("SeatAvailabilityPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SeatAvailabilityMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult SeatAvailabilityPost([FromHeader][Required()]string aGProviders, [FromBody]SeatAvailabilityPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SeatAvailabilityMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SeatAvailabilityMedia>(exampleJson)
            : default(SeatAvailabilityMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post ServiceList
        /// </summary>
        /// <remarks>ServiceList returns a service list information for existing order. </remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload">ServiceListPayload is the type for ServiceList endpoint request body</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/ServiceList")]
        [ValidateModelState]
        [SwaggerOperation("ServiceListPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceListMedia), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult ServiceListPost([FromHeader][Required()]string aGProviders, [FromBody]ServiceListPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceListMedia));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceListMedia>(exampleJson)
            : default(ServiceListMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
