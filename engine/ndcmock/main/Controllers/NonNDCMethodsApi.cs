/*
 * AirGateway NDC JSON API
 *
 * This API allows shopping and booking with IATA's New Distribution Capabilities (NDC) standard. It provides aggregated shopping capabilities (AirShopping), detailed offer description (OfferPrice), flight seat selection (SeatAvailability) and booking flight reservations (OrderCreate). Some fields in our API (when noticed) use the PADIS Standard v16.1. Find more information <a href=http://www.iata.org/whatwedo/workgroups/Pages/padis.aspx>here</a>
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NonNDCMethodsApiController : ControllerBase
    { 
        /// <summary>
        /// Post OrderComments
        /// </summary>
        /// <remarks>OrderComments updates order with new comments</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload">OrderCommentsPayload is the type for OrderComments endpoint request body</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/v1.2/OrderComments")]
        [ValidateModelState]
        [SwaggerOperation("OrderCommentsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderCommentsMedia), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult OrderCommentsPost([FromHeader][Required()]string aGProviders, [FromBody]OrderCommentsPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderCommentsMedia));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderCommentsMedia>(exampleJson)
            : default(OrderCommentsMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// GET OrderFile
        /// </summary>
        /// <remarks>OrderFile</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="fileId">Airgateway File ID</param>
        /// <param name="id">Airgateway Order ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1.2/OrderFile")]
        [ValidateModelState]
        [SwaggerOperation("OrderFileGET")]
        public virtual IActionResult OrderFileGET([FromHeader][Required()]string aGProviders, [FromQuery]string fileId, [FromQuery]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// GET OrderHistory
        /// </summary>
        /// <remarks>OrderHistory</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="id">Airgateway Order ID</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/v1.2/OrderHistory")]
        [ValidateModelState]
        [SwaggerOperation("OrderHistoryGET")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderHistoryMedia), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult OrderHistoryGET([FromHeader][Required()]string aGProviders, [FromQuery]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderHistoryMedia));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderHistoryMedia>(exampleJson)
            : default(OrderHistoryMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// GET OrderList
        /// </summary>
        /// <remarks>OrderList</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="agency">Agency</param>
        /// <param name="approveStatus">Orders with approve status [in_progress / approved / refused]</param>
        /// <param name="bookingDateFrom">Booking date from</param>
        /// <param name="bookingDateTo">Booking date to</param>
        /// <param name="corporateID">Corporate ID</param>
        /// <param name="departureDate">Departure date</param>
        /// <param name="destination">Destination of flight</param>
        /// <param name="disrupted">Show disrupted orders</param>
        /// <param name="id">Sort order</param>
        /// <param name="origin">Origin of flight</param>
        /// <param name="page">Page number</param>
        /// <param name="pageSize">Orders number per page</param>
        /// <param name="pax">PAX number</param>
        /// <param name="pnr">PNR</param>
        /// <param name="providers">Providers list separated by comma</param>
        /// <param name="psgName">Passenger name</param>
        /// <param name="psgSurname">Passenger surname</param>
        /// <param name="showOrdersType">Show orders type</param>
        /// <param name="showSubagencies">Flag to show subagencies&#39; orders</param>
        /// <param name="sort">Sort order</param>
        /// <param name="status">Status of order</param>
        /// <param name="ticketNumber">Ticket Nr. / EMD</param>
        /// <response code="200">OK</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/v1.2/OrderList")]
        [ValidateModelState]
        [SwaggerOperation("OrderListGET")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderListMedia), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult OrderListGET([FromHeader][Required()]string aGProviders, [FromQuery]string agency, [FromQuery]string approveStatus, [FromQuery]string bookingDateFrom, [FromQuery]string bookingDateTo, [FromQuery]string corporateID, [FromQuery]string departureDate, [FromQuery]string destination, [FromQuery]string disrupted, [FromQuery]string id, [FromQuery]string origin, [FromQuery]string page, [FromQuery]string pageSize, [FromQuery]string pax, [FromQuery]string pnr, [FromQuery]string providers, [FromQuery]string psgName, [FromQuery]string psgSurname, [FromQuery]string showOrdersType, [FromQuery]string showSubagencies, [FromQuery]string sort, [FromQuery]string status, [FromQuery]string ticketNumber)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderListMedia));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderListMedia>(exampleJson)
            : default(OrderListMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderMetas
        /// </summary>
        /// <remarks>OrderMetas updates order with new metas</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload">OrderMetasPayload is the type for OrderMetas endpoint request body</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/v1.2/OrderMetas")]
        [ValidateModelState]
        [SwaggerOperation("OrderMetasPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderMetasMedia), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult OrderMetasPost([FromHeader][Required()]string aGProviders, [FromBody]OrderMetasPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderMetasMedia));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderMetasMedia>(exampleJson)
            : default(OrderMetasMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderRemarks
        /// </summary>
        /// <remarks>OrderRemarks updates order with new remarks</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload">OrderRemarksPayload is the type for OrderRemarks endpoint request body</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/v1.2/OrderRemarks")]
        [ValidateModelState]
        [SwaggerOperation("OrderRemarksPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderRemarksMedia), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult OrderRemarksPost([FromHeader][Required()]string aGProviders, [FromBody]OrderRemarksPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderRemarksMedia));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderRemarksMedia>(exampleJson)
            : default(OrderRemarksMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Post OrderReview
        /// </summary>
        /// <remarks>OrderReview returns result of review approval/rejection</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <param name="payload">OrderReviewPayload is the type for OrderReview endpoint request body</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/v1.2/OrderReview")]
        [ValidateModelState]
        [SwaggerOperation("OrderReviewPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderReviewMedia), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "Service Unavailable")]
        public virtual IActionResult OrderReviewPost([FromHeader][Required()]string aGProviders, [FromBody]OrderReviewPayload payload)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderReviewMedia));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderReviewMedia>(exampleJson)
            : default(OrderReviewMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// GET ProviderList
        /// </summary>
        /// <remarks>ProviderList</remarks>
        /// <param name="aGProviders">Provider ID</param>
        /// <response code="200">OK</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/v1.2/ProviderList")]
        [ValidateModelState]
        [SwaggerOperation("ProviderListGET")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProviderListMedia), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult ProviderListGET([FromHeader][Required()]string aGProviders)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProviderListMedia));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProviderListMedia>(exampleJson)
            : default(ProviderListMedia);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>Status returns ok if API is active</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1.2/status")]
        [ValidateModelState]
        [SwaggerOperation("StatusGet")]
        public virtual IActionResult StatusGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }
    }
}
